{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my world! \u00b6 I'm a software developer by profession who loves to solve real world problems \ud83d\ude00","title":"Welcome to my world!"},{"location":"#welcome-to-my-world","text":"I'm a software developer by profession who loves to solve real world problems \ud83d\ude00","title":"Welcome to my world!"},{"location":"Resume/","text":"See Resume See Thesis","title":"Home"},{"location":"blogs/gitAndCpanel/","text":"How to clone a private Github repo into Cpanel \u00b6 The goal of this blog post is to help you in setting up your Github private repo on Cpanel, so that when you make a push to your blog post, then those changes are synced automatically. So let's get started \ud83d\ude00 Generate a key in Cpanel \u00b6 The goal is the create a public and private key pair. Then copy the public key and save it in Github. First we will create a pair in Cpanel. For this go to Cpanel \u2192 Security \u2192 SSH Access \u2192 Manage Keys \u2192 Generate New Key (enter a strong password) Copy public key from Cpanel \u00b6 After generating a public-private key pair, now is the time to copy the public key. For doing this, go to SSH Access \u2192 Manage SSH Keys \u2192 Public keys \u2192 Authorize (make authorize) \u2192 Go back \u2192 Press view/download \u2192 Download key \u2192 open it using a text editor and copy it. Copy public key to Github \u00b6 The goal is to save the public key in your private git repo, so that Cpanel can fetch data from it. Go to your Github \u2192 Your private repo \u2192 Settings \u2192 Deploy Keys \u2192 add deploy key \u2192 Provide any title and paste the public key. Add an .cpanel.yml file. \u00b6 Before we go ahead, we need to make sure the files we add from the Github are deployed to cpanel. You will need to know 2 important things here yourUserName/repositories : this is the folder where all the repo's will get synced. yourUserName/public_html : This is the folder from where the actual site content is served. So, this should contain an index.html at minimum. The .cpanel.yml file is a basic configuration file. It can be used to copy the contents from your yourUserName/repositories/subdir directory to yourUserName/public_html for example. Make sure you've added a .cpanel.yml file at the root of your project that you are uploading. The contents of this file can be something like --- deployment : tasks : - export DEPLOYPATH = /home/ReplaceItByYourUserName/public_html/ - /bin/rm -Rf $DEPLOYPATH - /bin/mkdir $DEPLOYPATH - /bin/cp -R FileWhereSiteContentIsLocated/* $DEPLOYPATH Clone a repo to CPanel \u00b6 After you upload your project, this file will be hidden (as this is a . file) but can be seen by going to your directory from cPanel home \u2192 Advanced \u2192 Shell cd yourHome/Repositories ls -a Go to Cpanel \u2192 Git\u2122 Version Control \u2192 create clone url and enter the similar Clone URL git@github.com:<user_name>/<repository_name>.git The Repository Path and Repo Name will be autofilled. Then hit create. Pull from the sources. \u00b6 Manage repository from list \u2192 Manage \u2192 pull or deploy from Github \u2192 Click on Update from Remote: works perfectly (any files edit or delete you fetch/pull from GitHub now)","title":"Clone private repo into Cpanel"},{"location":"blogs/gitAndCpanel/#how-to-clone-a-private-github-repo-into-cpanel","text":"The goal of this blog post is to help you in setting up your Github private repo on Cpanel, so that when you make a push to your blog post, then those changes are synced automatically. So let's get started \ud83d\ude00","title":"How to clone a private Github repo into Cpanel"},{"location":"blogs/gitAndCpanel/#generate-a-key-in-cpanel","text":"The goal is the create a public and private key pair. Then copy the public key and save it in Github. First we will create a pair in Cpanel. For this go to Cpanel \u2192 Security \u2192 SSH Access \u2192 Manage Keys \u2192 Generate New Key (enter a strong password)","title":"Generate a key in Cpanel"},{"location":"blogs/gitAndCpanel/#copy-public-key-from-cpanel","text":"After generating a public-private key pair, now is the time to copy the public key. For doing this, go to SSH Access \u2192 Manage SSH Keys \u2192 Public keys \u2192 Authorize (make authorize) \u2192 Go back \u2192 Press view/download \u2192 Download key \u2192 open it using a text editor and copy it.","title":"Copy public key from Cpanel"},{"location":"blogs/gitAndCpanel/#copy-public-key-to-github","text":"The goal is to save the public key in your private git repo, so that Cpanel can fetch data from it. Go to your Github \u2192 Your private repo \u2192 Settings \u2192 Deploy Keys \u2192 add deploy key \u2192 Provide any title and paste the public key.","title":"Copy public key to Github"},{"location":"blogs/gitAndCpanel/#add-an-cpanelyml-file","text":"Before we go ahead, we need to make sure the files we add from the Github are deployed to cpanel. You will need to know 2 important things here yourUserName/repositories : this is the folder where all the repo's will get synced. yourUserName/public_html : This is the folder from where the actual site content is served. So, this should contain an index.html at minimum. The .cpanel.yml file is a basic configuration file. It can be used to copy the contents from your yourUserName/repositories/subdir directory to yourUserName/public_html for example. Make sure you've added a .cpanel.yml file at the root of your project that you are uploading. The contents of this file can be something like --- deployment : tasks : - export DEPLOYPATH = /home/ReplaceItByYourUserName/public_html/ - /bin/rm -Rf $DEPLOYPATH - /bin/mkdir $DEPLOYPATH - /bin/cp -R FileWhereSiteContentIsLocated/* $DEPLOYPATH","title":"Add an .cpanel.yml file."},{"location":"blogs/gitAndCpanel/#clone-a-repo-to-cpanel","text":"After you upload your project, this file will be hidden (as this is a . file) but can be seen by going to your directory from cPanel home \u2192 Advanced \u2192 Shell cd yourHome/Repositories ls -a Go to Cpanel \u2192 Git\u2122 Version Control \u2192 create clone url and enter the similar Clone URL git@github.com:<user_name>/<repository_name>.git The Repository Path and Repo Name will be autofilled. Then hit create.","title":"Clone a repo to CPanel"},{"location":"blogs/gitAndCpanel/#pull-from-the-sources","text":"Manage repository from list \u2192 Manage \u2192 pull or deploy from Github \u2192 Click on Update from Remote: works perfectly (any files edit or delete you fetch/pull from GitHub now)","title":"Pull from the sources."},{"location":"installing_flink/flink/","text":"Installing Apache Flink \u00b6 Building Apache Flink is very easy yet it took approximately 30 minutes. Steps for installing apache Flink on Mac/ubuntu \u00b6 Steps are: Unix-like environment such as Linux, Mac OS X, Cygwin. Git Make sure you have java installed, check it in terminal using java -version Maven is used as build tool, if you do not have maven install it using brew install maven Unix-like environment (We use Linux, Mac OS X, Cygwin) is required Go to this link and download the source version. You can also clone the source form git by entering following command in your terminal. git clone https://github.com/apache/flink cd to the downloaded file and then unpack it by using tar xzf *.tgz where * is filename. Alternatively in Mac you can also double click the tar file and it will be un-tared and unzipped. Then cd to un-tarred file and enter following command in terminal mvn clean install -DskipTests Let build will start and will take almost 30 minutes and finally if everything is done successfully, then you will see following message. In my system the Flink is installed at the following location. /Users/YOUR_USER_NAME/.m2/repository/org/apache/flink Success Congrats, we have successfully build Apache-Flink on our system.If you have some issues or suggestions, please feel free to comment below.","title":"Installing Flink"},{"location":"installing_flink/flink/#installing-apache-flink","text":"Building Apache Flink is very easy yet it took approximately 30 minutes.","title":"Installing Apache Flink"},{"location":"installing_flink/flink/#steps-for-installing-apache-flink-on-macubuntu","text":"Steps are: Unix-like environment such as Linux, Mac OS X, Cygwin. Git Make sure you have java installed, check it in terminal using java -version Maven is used as build tool, if you do not have maven install it using brew install maven Unix-like environment (We use Linux, Mac OS X, Cygwin) is required Go to this link and download the source version. You can also clone the source form git by entering following command in your terminal. git clone https://github.com/apache/flink cd to the downloaded file and then unpack it by using tar xzf *.tgz where * is filename. Alternatively in Mac you can also double click the tar file and it will be un-tared and unzipped. Then cd to un-tarred file and enter following command in terminal mvn clean install -DskipTests Let build will start and will take almost 30 minutes and finally if everything is done successfully, then you will see following message. In my system the Flink is installed at the following location. /Users/YOUR_USER_NAME/.m2/repository/org/apache/flink Success Congrats, we have successfully build Apache-Flink on our system.If you have some issues or suggestions, please feel free to comment below.","title":"Steps for installing apache Flink on Mac/ubuntu"},{"location":"linux/android_device/","text":"Attach android device to android studio in Ubuntu \u00b6 Make sure you have enabled developer options , if not then follow these steps Go to Settings \u2192 About phone \u2192 Build number . On a Samsung Galaxy device, go to Settings \u2192 About device \u2192 Build number . Tap build number 7 times. Go back to Settings, where you\u2019ll find a developer options entry in the menu. In terminal type adb devices Error If you see something like ?????????? no permissions , then create a new file using nano as sudo nano /etc/udev/rules.d/51-android.rules Then paste the following code into that file SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0bb4\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0e79\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0502\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0b05\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"413c\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0489\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"091e\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"18d1\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0bb4\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"12d1\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"24e3\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"2116\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0482\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"17ef\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"1004\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"22b8\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0409\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"2080\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0955\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"2257\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"10a9\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"1d4d\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0471\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"04da\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"05c6\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"1f53\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"04e8\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"04dd\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0fce\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0930\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"19d2\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"1bbb\" , MODE = \"0666\" Then enter following commands sudo chmod 644 /etc/udev/rules.d/51-android.rules sudo chown root. /etc/udev/rules.d/51-android.rules sudo service udev restart sudo killall adb Remove he USB cable and connect it again. Then enter adb devices","title":"Setting andoid device"},{"location":"linux/android_device/#attach-android-device-to-android-studio-in-ubuntu","text":"Make sure you have enabled developer options , if not then follow these steps Go to Settings \u2192 About phone \u2192 Build number . On a Samsung Galaxy device, go to Settings \u2192 About device \u2192 Build number . Tap build number 7 times. Go back to Settings, where you\u2019ll find a developer options entry in the menu. In terminal type adb devices Error If you see something like ?????????? no permissions , then create a new file using nano as sudo nano /etc/udev/rules.d/51-android.rules Then paste the following code into that file SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0bb4\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0e79\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0502\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0b05\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"413c\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0489\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"091e\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"18d1\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0bb4\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"12d1\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"24e3\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"2116\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0482\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"17ef\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"1004\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"22b8\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0409\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"2080\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0955\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"2257\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"10a9\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"1d4d\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0471\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"04da\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"05c6\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"1f53\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"04e8\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"04dd\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0fce\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"0930\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"19d2\" , MODE = \"0666\" SUBSYSTEM == \"usb\" , ATTRS { idVendor }== \"1bbb\" , MODE = \"0666\" Then enter following commands sudo chmod 644 /etc/udev/rules.d/51-android.rules sudo chown root. /etc/udev/rules.d/51-android.rules sudo service udev restart sudo killall adb Remove he USB cable and connect it again. Then enter adb devices","title":"Attach android device to android studio in Ubuntu"},{"location":"linux/commands/","text":"Linux includes a large number of commands, but I have chosen 37 of the most important ones to present here. Learn these commands, and you\u2019ll be much more at home at the Linux command prompt. The below list is presented in alphabetical order. A command\u2019s position in the list is not representative of its usefulness or simplicity. Info For the final word on a command\u2019s usage, refer to its man pages. The man command is in our list, of course\u2014it\u2019s short for \u201cmanual.\u201d 1. alias \u00b6 The alias command lets you give your own name to a command or sequence of commands. You can then type your short name, and the shell will execute the command or sequence of commands for you. alias cls = clear This sets up an alias called cls . It will be another name for clear . When you type cls, it will clear the screen just as though you had typed clear . Your alias saves a few keystrokes, sure. But, if you frequently move between Windows and Linux command line, you can find yourself typing the Windows cls command on a Linux machine that doesn\u2019t know what you mean. Now it will know. Aliases can be much more intricate than that simple example. Here\u2019s an alias called pf (for process find) that is just a little more complex. Note the use of quotation marks around the command sequence. This is required if the command sequence has spaces in it. This alias uses the ps command to list the running processes and then pipes them through the grep command. The grep command looks for entries in the output from ps that match the command line parameter $1 . alias pf = \"ps -e | grep $1 \" If you wanted to discover the process ID (PID) of the shutter process\u2014or to find out if shutter was even running\u2014you could use the alias like this. Type pf followed by a space, and the name of the process you are interested in: pf shutter alias command in terminal window Warn Aliases defined on the command line will die with the terminal window. When you close it, they are gone. To make your aliases always be available to you, add them to the .bash_aliases file in your home directory such as .bash_profile and .bashrc 2. cat \u00b6 The cat command (short for \u201cconcatenate\u201d) lists the contents of files to the terminal window. This is faster than opening the file in an editor, and there\u2019s no chance you can accidentally alter the file. To read the contents of your .bash_log_out file, type the following command while the home directory is your current working directory, as it is by default. cat .bash_logout With files longer than the number of lines in your terminal window, the text will whip past too fast for you to read. You can pipe the output from cat through less to make the process more manageable. With less you can scroll forward and backward through the file using the Up and Down Arrow keys, the PgUp and PgDn keys, and the Home and End keys. Type q to quit from less . cat .bashrc | less cat .bashrc | Less in a terminal window 3. cd \u00b6 The cd command changes your current directory. In other words, it moves you to a new place in the filesystem.If you are changing to a directory that is within your current directory, you can simply type cd and the name of the other directory. cd work If you are changing to a directory elsewhere within the filesystem directory tree, provide the path to the directory with a leading / cd /usr/local/bin To quickly return to your home directory, use the ~ (tilde) character as the directory name. Tip You can use the double dot symbol .. to represent the parent of the current directory. You can type the following command to go up a directory: cd .. Imagine you are in a directory. The parent directory has other directories in it, as well as the directory you\u2019re currently in. To change into one of those other directories, you can use the .. symbol to shorten what you have to type. cd ../games 4. chmod \u00b6 The chmod command sets the file permissions flags on a file or folder. The flags define who can read, write to or execute the file. When you list files with the -l (long format) option you\u2019ll see a string of characters that look like -rwxrwxrwx If the first character is a - the item is a file. if it is a d the item is a directory. The rest of the string is three sets of three characters. From the left, the first three represent the file permissions of the owner , the middle three represent the file permissions of the group and the rightmost three characters represent the permissions for others . In each set:- r stands for read w stands for write x stands for execute. If the r, w, or x character is present that file permission is granted. If the letter is not present and a - appears instead, that file permission is not granted. One way to use chmod is to provide the permissions you wish to give to the owner, group, and others as a 3 digit number. The leftmost digit represents the owner. The middle digit represents the group. The rightmost digit represents the others. The digits you can use and what they represent are listed here: 0 : No permission 1 : Execute permission 2 : Write permission 3 : Write and execute permissions 4 : Read permission 5 : Read and execute permissions 6 : Read and write permissions 7 : Read, write and execute permissions Looking at our example.txt file, we can see that all three sets of characters are rwx . That means everyone has read, write and execute rights with the file. To set the permission to be read, write, and execute (7 from our list) for the owner; read and write (6 from our list) for the group; and read and execute (5 from our list) for the others we\u2019d need to use the digits 765 with the chmod command: chmod -R 765 example.txt chmod command in a terminal window To set the permission to be read, write and execute (7 from our list) for the owner, and read and write (6 from our list) for the group and for the others we\u2019d need to use the digits 766 with the chmod command: chmod 766 example.txt 5. chown \u00b6 The chown command allows you to change the owner and group owner of a file. Listing our example.txt file with ls -l we can see amar amar in the file description. The first of these indicates the name of the file owner, which in this case is the user amar. The second entry shows that the name of the group owner is also amar. Each user has a default group created when the user is created. That user is the only member of that group. This shows that the file is not shared with any other groups of users. Tip You can use chown to change the owner or group, or both of a file. You must provide the name of the owner and the group, separated by a : character. You will need to use sudo. To retain amar as the owner of the file but to set mary as the group owner, use this command: sudo chown amar:mary example.txt To change both the owner and the group owner to mary, you would use the following command; sudo chown mary:mary example.txt To change the file so that amar is once more the file owner and the group owner, use this command: sudo chown amar:amar example.txt 6. curl \u00b6 The curl command is a tool to retrieve information and files from Uniform Resource Locators (URLs) or internet addresses. The curl command may not be provided as a standard part of your Linux distribution. Use apt-get to install this package onto your system if you\u2019re using Ubuntu or another Debian-based distribution. On other Linux distributions, use your Linux distribution\u2019s package management tool instead. sudo apt-get install curl Suppose you want to retrieve a single file from a GitHub repository. There is no officially supported way to this. You\u2019re forced to clone the entire repository. With curl however, we can retrieve the file we want on its own. This command retrieves the file for us. Note that you need to specify the name of the file to save it in, using the -o (output) option. If you do not do this, the contents of the file are scrolled rapidly in the terminal window but not saved to your computer. curl https://raw.githubusercontent.com/torvalds/linux/master/kernel/events/core.c -o core.c If you don\u2019t want to see the download progress information use the -s (silent) option. curl -s https://raw.githubusercontent.com/torvalds/linux/master/kernel/events/core.c -o core.c 7. df \u00b6 The df command shows the size, used space, and available space on the mounted filesystems of your computer. Two of the most useful options are the -h (human readable) and -x (exclude) options. The human-readable option displays the sizes in Mb or Gb instead of in bytes. The exclude option allows you to tell df to discount filesystems you are not interested in. For example, the squashfs pseudo-filesystems that are created when you install an application with the snap command. df -h -x squashfs 8. diff \u00b6 The diff command compares two text files and shows the differences between them. There are many options to tailor the display to your requirements. The -y (side by side) option shows the line differences side by side. The -w (width) option lets you specify the maximum line width to use to avoid wraparound lines. The two files are called alpha1.txt and alpha2.txt in this example. The --suppress-common-lines prevents diff from listing the matching lines, letting you focus on the lines which have differences. diff -y -W 70 alpha1.txt alpha2.txt --suppress-common-lines 9. echo \u00b6 The echo command prints (echoes) a string of text to the terminal window. The command below will print the words \u201cA string of text\u201d on the terminal window. echo A string of text The echo command can show the value of environment variables, for example, the $USER, $HOME, and $PATH environment variables. These hold the values of the name of the user, the user\u2019s home directory, and the path searched for matching commands when the user types something on the command line. echo $USER echo $HOME echo $PATH The following command will cause a bleep to be issued. The -e (escape code) option interprets the escaped a character as a \u2018bell\u2019 character. echo -e \"\\a\" The echo command is also invaluable in shell scripts. A script can use this command to generate visible output to indicate the progress or results of the script as it is executed. 10. exit \u00b6 The exit command will close a terminal window, end the execution of a shell script, or log you out of an SSH remote access session. exit 11. find \u00b6 Use the find command to track down files that you know exist if you can\u2019t remember where you put them. You must tell find where to start searching from and what it is looking for. In this example, the . matches the current folder and the -name option tells find to look for files with a name that matches the search pattern. You can use wildcards, where * represents any sequence of characters and ? represents any single character. We\u2019re using ones to match any file name containing the sequence \u201cones.\u201d This would match words like bones, stones, and lonesome. find . -name *ones* find command in a terminal window As we can see, find has returned a list of matches. One of them is a directory called Ramones. We can tell find to restrict the search to files only. We do this using the -type option with the f parameter. The f parameter stands for files. find . -type f -name *ones* If you want the search to be case insensitive use the -iname (insensitive name) option. find . -iname *wild* 12. finger \u00b6 The finger command gives you a short dump of information about a user, including the time of the user\u2019s last login, the user\u2019s home directory, and the user account\u2019s full name. 13. free \u00b6 The free command gives you a summary of the memory usage with your computer. It does this for both the main Random Access Memory (RAM) and swap memory. The -h (human) option is used to provide human-friendly numbers and units. Without this option, the figures are presented in bytes. free -h 14. grep \u00b6 The grep utility searches for lines which contain a search pattern. When we looked at the alias command, we used grep to search through the output of another program, ps . The grep command can also search the contents of files. Here we\u2019re searching for the word \u201ctrain\u201d in all text files in the current directory. grep train *.txt The output lists the name of the file and shows the lines that match. The matching text is highlighted. grep command in a terminal window The functionality and sheer usefulness of grep definitely warrants you checking out its man page. 15. groups \u00b6 The groups command tells you which groups a user is a member of. groups dave groups mary 16. gzip \u00b6 The gzip command compresses files. By default, it removes the original file and leaves you with the compressed version. To retain both the original and the compressed version, use the -k (keep) option. gzip -k core.c 17. head \u00b6 The head command gives you a listing of the first 10 lines of a file. If you want to see fewer or more lines, use the -n (number) option. In this example, we use head with its default of 10 lines. We then repeat the command asking for only five lines. head -core.c head -n 5 core.c 18. history \u00b6 The history command lists the commands you have previously issued on the command line. You can repeat any of the commands from your history by typing an exclamation point ! and the number of the command from the history list. !188 Typing two exclamation points repeats your previous command. !! 19. kill \u00b6 The kill command allows you to terminate a process from the command line. You do this by providing the process ID (PID) of the process to kill. Don\u2019t kill processes willy-nilly. You need to have a good reason to do so. In this example, we\u2019ll pretend the shutter program has locked up. To find the PID of shutter we\u2019ll use our ps and grep trick from the section about the alias command, above. We can search for the shutter process and obtain its PID as follows: ps -e | grep shutter. Once we have determined the PID\u20141692 in this case\u2014we can kill it as follows: kill 1692 kill command in a terminal window 20. less \u00b6 The less command allows you to view files without opening an editor. It\u2019s faster to use, and there\u2019s no chance of you inadvertently modifying the file. With less you can scroll forward and backward through the file using the Up and Down Arrow keys, the PgUp and PgDn keys and the Home and End keys. Press the Q key to quit from less. To view a file provide its name to less as follows: less core.c less command in a terminal window You can also pipe the output from other commands into less. To see the output from ls for a listing of your entire hard drive, use the following command: ls -R / | less less command in a terminal window Use / to search forward in the file and use ? to search backward. 21. ls \u00b6 This might be the first command the majority of Linux users meet. It lists the files and folders in the directory you specify. By default, ls looks in the current directory. There are a great many options you can use with ls , and we strongly advise reviewing its the man page. Some common examples are presented here. To list the files and folders in the current directory: ls To list the files and folders in the current directory with a detailed listing use the -l (long) option: ls -l To use human-friendly file sizes include the -h (human) option: ls -lh To include hidden files use the -a (all files) option: ls -lha ls command in a terminal window 22. man \u00b6 The man command displays the \u201cman pages\u201d for a command in less . The man pages are the user manual for that command. Because man uses less to display the man pages, you can use the search capabilities of less. For example, to see the man pages for chown, use the following command: man chown Use the Up and Down arrow or PgUp and PgDn keys to scroll through the document. Press q to quit the man page or pressh for help. man command in a terminal window 23. mkdir \u00b6 The mkdir command allows you to create new directories in the filesystem. You must provide the name of the new directory to mkdir. If the new directory is not going to be within the current directory, you must provide the path to the new directory. To create two new directories in the current directory called \u201cinvoices\u201d and \u201cquotes,\u201d use these two commands: mkdir invoices mkdir quotes To create a new directory called \u201c2019\u201d inside the \u201cinvoices\u201d directory, use this command: mkdir invoices/2109 If you are going to create a directory, but its parent directory does not exist, you can use the -p (parents) option to have mkdir create all of the required parent directories too. In the following command, we are creating the \u201c2019\u201d directory inside the \u201cyearly\u201d directory inside the \u201cquotes\u201d directory. The \u201cyearly\u201d directory does not exist, but we can have mkdir create all the specified directories at once: mkdir -p quotes/yearly/2019 The \u201cyearly\u201d directory is also created. 24. mv \u00b6 The mv command allows you to move files and directories from directory to directory. It also allows you to rename files. To move a file you must tell mv where the file is and where you want it to be moved to. In this example, we\u2019re moving a file called apache.pdf from the ~/Document/Ukulele directory and placing it in the current directory, represented by the single . character. mv ~/Documents/Ukulele/Apache.pdf . To rename the file, you \u201cmove\u201d it into a new file with the new name. mv Apache.pdf The_Shadows_Apache.pdf The file move and rename action could have been achieved in one step: mv ~/Documents/Ukulele/Apache.pdf ./The_Shadows_Apache.pdf 25. passwd \u00b6 The passwd command lets you change the password for a user. Just type passwd to change your own password. You can also change the password of another user account, but you must use sudo. You will be asked to enter the new password twice. sudo passwd mary 26. ping \u00b6 The ping command lets you verify that you have network connectivity with another network device. It is commonly used to help troubleshoot networking issues. To use ping, provide the IP address or machine name of the other device. ping 192 .168.4.18 The ping command will run until you stop it with Ctrl+C . Here\u2019s what\u2019s going on here: The device at IP address 192.168.4.18 is responding to our ping requests and is sending back packets of 64 bytes. The Internet Control Messaging Protocol (ICMP) sequence numbering allows us to check for missed responses (dropped packets). The TTL figure is the \u201ctime to live\u201d for a packet. Each time the packet goes through a router, it is (supposed to be) decremented by one. If it reaches zero the packet is thrown away. The aim of this is to prevent network loopback problems from flooding the network. The time value is the duration of the round trip from your computer to the device and back. Simply put, the lower this time, the better. To ask ping to run for a specific number of ping attempts, use the -c (count) option. ping -c 5 192 .168.4.18 To hear a ping, use the -a (audible) option. ping -a 192 .168.4.18 27. ps \u00b6 The ps command lists running processes. Using ps without any options causes it to list the processes running in the current shell. ps To see all the processes related to a particular user, use the -u (user) option. This is likely to be a long list, so for convenience pipe it through less. ps -u dave | less To see every process that is running, use the -e (every process) option: ps -e | less 28. pwd \u00b6 Nice and simple, the pwd command prints the working directory (the current directory) from the root / directory. pwd pwd command in a terminal window 29. shutdown \u00b6 The shutdown command lets you shut down or reboot your Linux system. Using shutdown with no parameters will shut down your computer in one minute. shutdown To shut down immediately, use the now parameter. shutdown now You can also schedule a shutdown and inform any logged in users of the pending shutdown. To let the shutdown command know when you want it to shut down, you provide it with a time. This can be a set number of minutes from now, such as +90 or a precise time, like 23:00. Any text message you provide is broadcast to logged in users. shutdown 23 :00 Shutdown tonight at 23 :00, save your work and log out before then ! To cancel a shutdown, use the -c (cancel) option. Here we have scheduled a shutdown for fifteen minutes time from now\u2014and then changed our minds. shutdown +15 Shutting down in 15 minutes! shutdown -c Shutdown -c cancel command 30. SSH \u00b6 Use the ssh command to make a connection to a remote Linux computer and log into your account. To make a connection, you must provide your user name and the IP address or domain name of the remote computer. In this example, the user mary is logging into the computer at 192.168.4.23. Once the connection is established, she is asked for her password. ssh mary@192.168.4.23 ssh command in a terminal window Her user name and password are verified and accepted, and she is logged in. Notice that her prompt has changed from \u201cNostromo\u201d to \u201chowtogeek.\u201d Mary issues the w command to list the current users on \u201chowtogeek\u201d system. She is listed as being connected from pts/1, which is a pseudo-terminal slave. That is, it is not a terminal directly connected to the computer. To close the session, mary types exit and is returned to the shell on the \u201cNostromo\u201d computer. w exit w and exit commands in a terminal window 31. sudo \u00b6 The sudo command is required when performing actions that require root or superuser permissions, such as changing the password for another user. sudo passwd mary passwd command in a terminal window 32. tail \u00b6 The tail command gives you a listing of the last 10 lines of a file. If you want to see fewer or more lines, use the -n (number) option. In this example, we use tail with its default of 10 lines. We then repeat the command asking for only five lines. tail core.c tail -n 5 core.c tail command in a terminal window 33. tar \u00b6 With the tar command, you can create an archive file (also called a tarball) that can contain many other files. This makes it much more convenient to distribute a collection of files. You can also use tar to extract the files from an archive file. It is common to ask tar to compress the archive. If you do not ask for compression, the archive file is created uncompressed. To create an archive file, you need to tell tar which files to include in the archive file, and the name you wish the archive file to have. In this example, the user is going to archive all of the files in the Ukulele directory, which is in the current directory. ls command in the terminal window They have used the -c (create) option and the -v (verbose) option. The verbose option gives some visual feedback by listing the files to the terminal window as they are added to the archive. The -f (filename) option is followed by the desired name of the archive. In this case, it is songs.tar. tar -cvf songs.tar Ukulele/ tar -cvf command in a terminal window The files are listed to the terminal window as they are added to the archive file. There are two ways to tell tar that you want the archive file to be compressed. The first is with the -z (gzip) option. This tells tar to use the gzip utility to compress the archive once it has been created. It is usual to add .gz as suffix to this type of archive. That allows anyone who is extracting files from it to know which commands to pass to tar to correctly retrieve the files. tar -cvzf songs.tar.gz Ukulele/ The files are listed to the terminal window as they are added to the archive file as before, but the creation of the archive will take a little longer because of the time required for the compression. To create an archive file that is compressed using a superior compression algorithm giving a smaller archive file use the -j (bzip2) option. tar -cvjf songs.tar.bz2 Ukulele/ Once again, the files are listed as the archive is created. The -j option is noticeably slower than the -z option. If you are archiving a great many files, you must choose between the -z option for decent compression and reasonable speed, or the -j option for better compression and slower speed. As can be seen in the screenshot below, the \u201c.tar\u201d file is the largest, the \u201c.tar.gz\u201d is smaller, and the \u201c.tar.bz2\u201d is the smallest of the archives. To extract files from an archive file use the -x (extract) option. The -v (verbose) and -f (filename) options behave as they do when creating archives. Use ls to confirm which type of archive you are going to extract the files from, then issue the following command. ls tar -xvf songs.tar ls and tar -xvf commands in a terminal window The files are listed as they are extracted. Note that the Ukulele directory is also recreated for you. To extract files from a \u201c.tar.gz\u201d archive, use the -z (gzip) option. tar -xvzf songs.tar.gz tar -xvzf command in a terminal window Finally, to extract files from a \u201c.tar.bz2\u201d archive use the -j option instead of the -z (gzip) option. tar -xvjf songs.tar.bz2 tar -xvjf command in a terminal window RELATED: How to Extract Files From a .tar.gz or .tar.bz2 File on Linux 34. top \u00b6 The top command shows you a real-time display of the data relating to your Linux machine. The top of the screen is a status summary. The first line shows you the time and how long your computer has been running for, how many users are logged into it, and what the load average has been over the past one, five, and fifteen minutes. The second line shows the number of tasks and their states: running, stopped, sleeping and zombie. The third line shows CPU information. Here\u2019s what the fields mean: us: value is the CPU time the CPU spends executing processes for users, in \u201cuser space\u201d sy: value is the CPU time spent on running system \u201ckernel space\u201d processes ni: value is the CPU time spent on executing processes with a manually set nice value id: is the amount of CPU idle time wa: value is the time the CPU spends waiting for I/O to complete hi: The CPU time spent servicing hardware interrupts si: The CPU time spent servicing software interrupts st: The CPU time lost due to running virtual machines ( \u201csteal time\u201d ) The fourth line shows the total amount of physical memory, and how much is free, used and buffered or cached. The fifth line shows the total amount of swap memory, and how much is free, used and available (taking into account memory that is expected to be recoverable from caches). top command in a terminal window The user has pressed the E key to change the display into more humanly digestible figures instead of long integers representing bytes. The columns in the main display are made up of: PID: Process ID USER: Name of the owner of the process PR: Process priority NI: The nice value of the process VIRT: Virtual memory used by the process RES: Resident memory used by the process SHR: Shared memory used by the process S: Status of the process. See the list below of the values this field can take %CPU: the share of CPU time used by the process since last update %MEM: share of physical memory used TIME+: total CPU time used by the task in hundredths of a second COMMAND: command name or command line ( name + options ) (The command column didn\u2019t fit into the screenshot.) The status of the process can be one of: D: Uninterruptible sleep R: Running S: Sleeping T: Traced ( stopped ) Z: Zombie Press the Q key to exit from top. RELATED: How to Set Process Priorities With nice and renice on Linux 35. uname \u00b6 You can obtain some system information regarding the Linux computer you\u2019re working on with the uname command. Use the -a (all) option to see everything. Use the -s (kernel name) option to see the type of kernel. Use the -r (kernel release) option to see the kernel release. Use the -v (kernel version) option to see the kernel version. uname -a uname -s uname -r uname -v uname command in a terminal window 36. w \u00b6 The w command lists the currently logged in users. w w command in a terminal window 37. whoami \u00b6 Use whoami to find out who you are logged in as or who is logged into an unmanned Linux terminal.","title":"Commands"},{"location":"linux/commands/#1-alias","text":"The alias command lets you give your own name to a command or sequence of commands. You can then type your short name, and the shell will execute the command or sequence of commands for you. alias cls = clear This sets up an alias called cls . It will be another name for clear . When you type cls, it will clear the screen just as though you had typed clear . Your alias saves a few keystrokes, sure. But, if you frequently move between Windows and Linux command line, you can find yourself typing the Windows cls command on a Linux machine that doesn\u2019t know what you mean. Now it will know. Aliases can be much more intricate than that simple example. Here\u2019s an alias called pf (for process find) that is just a little more complex. Note the use of quotation marks around the command sequence. This is required if the command sequence has spaces in it. This alias uses the ps command to list the running processes and then pipes them through the grep command. The grep command looks for entries in the output from ps that match the command line parameter $1 . alias pf = \"ps -e | grep $1 \" If you wanted to discover the process ID (PID) of the shutter process\u2014or to find out if shutter was even running\u2014you could use the alias like this. Type pf followed by a space, and the name of the process you are interested in: pf shutter alias command in terminal window Warn Aliases defined on the command line will die with the terminal window. When you close it, they are gone. To make your aliases always be available to you, add them to the .bash_aliases file in your home directory such as .bash_profile and .bashrc","title":"1. alias"},{"location":"linux/commands/#2-cat","text":"The cat command (short for \u201cconcatenate\u201d) lists the contents of files to the terminal window. This is faster than opening the file in an editor, and there\u2019s no chance you can accidentally alter the file. To read the contents of your .bash_log_out file, type the following command while the home directory is your current working directory, as it is by default. cat .bash_logout With files longer than the number of lines in your terminal window, the text will whip past too fast for you to read. You can pipe the output from cat through less to make the process more manageable. With less you can scroll forward and backward through the file using the Up and Down Arrow keys, the PgUp and PgDn keys, and the Home and End keys. Type q to quit from less . cat .bashrc | less cat .bashrc | Less in a terminal window","title":"2. cat"},{"location":"linux/commands/#3-cd","text":"The cd command changes your current directory. In other words, it moves you to a new place in the filesystem.If you are changing to a directory that is within your current directory, you can simply type cd and the name of the other directory. cd work If you are changing to a directory elsewhere within the filesystem directory tree, provide the path to the directory with a leading / cd /usr/local/bin To quickly return to your home directory, use the ~ (tilde) character as the directory name. Tip You can use the double dot symbol .. to represent the parent of the current directory. You can type the following command to go up a directory: cd .. Imagine you are in a directory. The parent directory has other directories in it, as well as the directory you\u2019re currently in. To change into one of those other directories, you can use the .. symbol to shorten what you have to type. cd ../games","title":"3. cd"},{"location":"linux/commands/#4-chmod","text":"The chmod command sets the file permissions flags on a file or folder. The flags define who can read, write to or execute the file. When you list files with the -l (long format) option you\u2019ll see a string of characters that look like -rwxrwxrwx If the first character is a - the item is a file. if it is a d the item is a directory. The rest of the string is three sets of three characters. From the left, the first three represent the file permissions of the owner , the middle three represent the file permissions of the group and the rightmost three characters represent the permissions for others . In each set:- r stands for read w stands for write x stands for execute. If the r, w, or x character is present that file permission is granted. If the letter is not present and a - appears instead, that file permission is not granted. One way to use chmod is to provide the permissions you wish to give to the owner, group, and others as a 3 digit number. The leftmost digit represents the owner. The middle digit represents the group. The rightmost digit represents the others. The digits you can use and what they represent are listed here: 0 : No permission 1 : Execute permission 2 : Write permission 3 : Write and execute permissions 4 : Read permission 5 : Read and execute permissions 6 : Read and write permissions 7 : Read, write and execute permissions Looking at our example.txt file, we can see that all three sets of characters are rwx . That means everyone has read, write and execute rights with the file. To set the permission to be read, write, and execute (7 from our list) for the owner; read and write (6 from our list) for the group; and read and execute (5 from our list) for the others we\u2019d need to use the digits 765 with the chmod command: chmod -R 765 example.txt chmod command in a terminal window To set the permission to be read, write and execute (7 from our list) for the owner, and read and write (6 from our list) for the group and for the others we\u2019d need to use the digits 766 with the chmod command: chmod 766 example.txt","title":"4. chmod"},{"location":"linux/commands/#5-chown","text":"The chown command allows you to change the owner and group owner of a file. Listing our example.txt file with ls -l we can see amar amar in the file description. The first of these indicates the name of the file owner, which in this case is the user amar. The second entry shows that the name of the group owner is also amar. Each user has a default group created when the user is created. That user is the only member of that group. This shows that the file is not shared with any other groups of users. Tip You can use chown to change the owner or group, or both of a file. You must provide the name of the owner and the group, separated by a : character. You will need to use sudo. To retain amar as the owner of the file but to set mary as the group owner, use this command: sudo chown amar:mary example.txt To change both the owner and the group owner to mary, you would use the following command; sudo chown mary:mary example.txt To change the file so that amar is once more the file owner and the group owner, use this command: sudo chown amar:amar example.txt","title":"5. chown"},{"location":"linux/commands/#6-curl","text":"The curl command is a tool to retrieve information and files from Uniform Resource Locators (URLs) or internet addresses. The curl command may not be provided as a standard part of your Linux distribution. Use apt-get to install this package onto your system if you\u2019re using Ubuntu or another Debian-based distribution. On other Linux distributions, use your Linux distribution\u2019s package management tool instead. sudo apt-get install curl Suppose you want to retrieve a single file from a GitHub repository. There is no officially supported way to this. You\u2019re forced to clone the entire repository. With curl however, we can retrieve the file we want on its own. This command retrieves the file for us. Note that you need to specify the name of the file to save it in, using the -o (output) option. If you do not do this, the contents of the file are scrolled rapidly in the terminal window but not saved to your computer. curl https://raw.githubusercontent.com/torvalds/linux/master/kernel/events/core.c -o core.c If you don\u2019t want to see the download progress information use the -s (silent) option. curl -s https://raw.githubusercontent.com/torvalds/linux/master/kernel/events/core.c -o core.c","title":"6. curl"},{"location":"linux/commands/#7-df","text":"The df command shows the size, used space, and available space on the mounted filesystems of your computer. Two of the most useful options are the -h (human readable) and -x (exclude) options. The human-readable option displays the sizes in Mb or Gb instead of in bytes. The exclude option allows you to tell df to discount filesystems you are not interested in. For example, the squashfs pseudo-filesystems that are created when you install an application with the snap command. df -h -x squashfs","title":"7. df"},{"location":"linux/commands/#8-diff","text":"The diff command compares two text files and shows the differences between them. There are many options to tailor the display to your requirements. The -y (side by side) option shows the line differences side by side. The -w (width) option lets you specify the maximum line width to use to avoid wraparound lines. The two files are called alpha1.txt and alpha2.txt in this example. The --suppress-common-lines prevents diff from listing the matching lines, letting you focus on the lines which have differences. diff -y -W 70 alpha1.txt alpha2.txt --suppress-common-lines","title":"8. diff"},{"location":"linux/commands/#9-echo","text":"The echo command prints (echoes) a string of text to the terminal window. The command below will print the words \u201cA string of text\u201d on the terminal window. echo A string of text The echo command can show the value of environment variables, for example, the $USER, $HOME, and $PATH environment variables. These hold the values of the name of the user, the user\u2019s home directory, and the path searched for matching commands when the user types something on the command line. echo $USER echo $HOME echo $PATH The following command will cause a bleep to be issued. The -e (escape code) option interprets the escaped a character as a \u2018bell\u2019 character. echo -e \"\\a\" The echo command is also invaluable in shell scripts. A script can use this command to generate visible output to indicate the progress or results of the script as it is executed.","title":"9. echo"},{"location":"linux/commands/#10-exit","text":"The exit command will close a terminal window, end the execution of a shell script, or log you out of an SSH remote access session. exit","title":"10. exit"},{"location":"linux/commands/#11-find","text":"Use the find command to track down files that you know exist if you can\u2019t remember where you put them. You must tell find where to start searching from and what it is looking for. In this example, the . matches the current folder and the -name option tells find to look for files with a name that matches the search pattern. You can use wildcards, where * represents any sequence of characters and ? represents any single character. We\u2019re using ones to match any file name containing the sequence \u201cones.\u201d This would match words like bones, stones, and lonesome. find . -name *ones* find command in a terminal window As we can see, find has returned a list of matches. One of them is a directory called Ramones. We can tell find to restrict the search to files only. We do this using the -type option with the f parameter. The f parameter stands for files. find . -type f -name *ones* If you want the search to be case insensitive use the -iname (insensitive name) option. find . -iname *wild*","title":"11. find"},{"location":"linux/commands/#12-finger","text":"The finger command gives you a short dump of information about a user, including the time of the user\u2019s last login, the user\u2019s home directory, and the user account\u2019s full name.","title":"12. finger"},{"location":"linux/commands/#13-free","text":"The free command gives you a summary of the memory usage with your computer. It does this for both the main Random Access Memory (RAM) and swap memory. The -h (human) option is used to provide human-friendly numbers and units. Without this option, the figures are presented in bytes. free -h","title":"13. free"},{"location":"linux/commands/#14-grep","text":"The grep utility searches for lines which contain a search pattern. When we looked at the alias command, we used grep to search through the output of another program, ps . The grep command can also search the contents of files. Here we\u2019re searching for the word \u201ctrain\u201d in all text files in the current directory. grep train *.txt The output lists the name of the file and shows the lines that match. The matching text is highlighted. grep command in a terminal window The functionality and sheer usefulness of grep definitely warrants you checking out its man page.","title":"14. grep"},{"location":"linux/commands/#15-groups","text":"The groups command tells you which groups a user is a member of. groups dave groups mary","title":"15. groups"},{"location":"linux/commands/#16-gzip","text":"The gzip command compresses files. By default, it removes the original file and leaves you with the compressed version. To retain both the original and the compressed version, use the -k (keep) option. gzip -k core.c","title":"16. gzip"},{"location":"linux/commands/#17-head","text":"The head command gives you a listing of the first 10 lines of a file. If you want to see fewer or more lines, use the -n (number) option. In this example, we use head with its default of 10 lines. We then repeat the command asking for only five lines. head -core.c head -n 5 core.c","title":"17. head"},{"location":"linux/commands/#18-history","text":"The history command lists the commands you have previously issued on the command line. You can repeat any of the commands from your history by typing an exclamation point ! and the number of the command from the history list. !188 Typing two exclamation points repeats your previous command. !!","title":"18. history"},{"location":"linux/commands/#19-kill","text":"The kill command allows you to terminate a process from the command line. You do this by providing the process ID (PID) of the process to kill. Don\u2019t kill processes willy-nilly. You need to have a good reason to do so. In this example, we\u2019ll pretend the shutter program has locked up. To find the PID of shutter we\u2019ll use our ps and grep trick from the section about the alias command, above. We can search for the shutter process and obtain its PID as follows: ps -e | grep shutter. Once we have determined the PID\u20141692 in this case\u2014we can kill it as follows: kill 1692 kill command in a terminal window","title":"19. kill"},{"location":"linux/commands/#20-less","text":"The less command allows you to view files without opening an editor. It\u2019s faster to use, and there\u2019s no chance of you inadvertently modifying the file. With less you can scroll forward and backward through the file using the Up and Down Arrow keys, the PgUp and PgDn keys and the Home and End keys. Press the Q key to quit from less. To view a file provide its name to less as follows: less core.c less command in a terminal window You can also pipe the output from other commands into less. To see the output from ls for a listing of your entire hard drive, use the following command: ls -R / | less less command in a terminal window Use / to search forward in the file and use ? to search backward.","title":"20. less"},{"location":"linux/commands/#21-ls","text":"This might be the first command the majority of Linux users meet. It lists the files and folders in the directory you specify. By default, ls looks in the current directory. There are a great many options you can use with ls , and we strongly advise reviewing its the man page. Some common examples are presented here. To list the files and folders in the current directory: ls To list the files and folders in the current directory with a detailed listing use the -l (long) option: ls -l To use human-friendly file sizes include the -h (human) option: ls -lh To include hidden files use the -a (all files) option: ls -lha ls command in a terminal window","title":"21. ls"},{"location":"linux/commands/#22-man","text":"The man command displays the \u201cman pages\u201d for a command in less . The man pages are the user manual for that command. Because man uses less to display the man pages, you can use the search capabilities of less. For example, to see the man pages for chown, use the following command: man chown Use the Up and Down arrow or PgUp and PgDn keys to scroll through the document. Press q to quit the man page or pressh for help. man command in a terminal window","title":"22. man"},{"location":"linux/commands/#23-mkdir","text":"The mkdir command allows you to create new directories in the filesystem. You must provide the name of the new directory to mkdir. If the new directory is not going to be within the current directory, you must provide the path to the new directory. To create two new directories in the current directory called \u201cinvoices\u201d and \u201cquotes,\u201d use these two commands: mkdir invoices mkdir quotes To create a new directory called \u201c2019\u201d inside the \u201cinvoices\u201d directory, use this command: mkdir invoices/2109 If you are going to create a directory, but its parent directory does not exist, you can use the -p (parents) option to have mkdir create all of the required parent directories too. In the following command, we are creating the \u201c2019\u201d directory inside the \u201cyearly\u201d directory inside the \u201cquotes\u201d directory. The \u201cyearly\u201d directory does not exist, but we can have mkdir create all the specified directories at once: mkdir -p quotes/yearly/2019 The \u201cyearly\u201d directory is also created.","title":"23. mkdir"},{"location":"linux/commands/#24-mv","text":"The mv command allows you to move files and directories from directory to directory. It also allows you to rename files. To move a file you must tell mv where the file is and where you want it to be moved to. In this example, we\u2019re moving a file called apache.pdf from the ~/Document/Ukulele directory and placing it in the current directory, represented by the single . character. mv ~/Documents/Ukulele/Apache.pdf . To rename the file, you \u201cmove\u201d it into a new file with the new name. mv Apache.pdf The_Shadows_Apache.pdf The file move and rename action could have been achieved in one step: mv ~/Documents/Ukulele/Apache.pdf ./The_Shadows_Apache.pdf","title":"24. mv"},{"location":"linux/commands/#25-passwd","text":"The passwd command lets you change the password for a user. Just type passwd to change your own password. You can also change the password of another user account, but you must use sudo. You will be asked to enter the new password twice. sudo passwd mary","title":"25. passwd"},{"location":"linux/commands/#26-ping","text":"The ping command lets you verify that you have network connectivity with another network device. It is commonly used to help troubleshoot networking issues. To use ping, provide the IP address or machine name of the other device. ping 192 .168.4.18 The ping command will run until you stop it with Ctrl+C . Here\u2019s what\u2019s going on here: The device at IP address 192.168.4.18 is responding to our ping requests and is sending back packets of 64 bytes. The Internet Control Messaging Protocol (ICMP) sequence numbering allows us to check for missed responses (dropped packets). The TTL figure is the \u201ctime to live\u201d for a packet. Each time the packet goes through a router, it is (supposed to be) decremented by one. If it reaches zero the packet is thrown away. The aim of this is to prevent network loopback problems from flooding the network. The time value is the duration of the round trip from your computer to the device and back. Simply put, the lower this time, the better. To ask ping to run for a specific number of ping attempts, use the -c (count) option. ping -c 5 192 .168.4.18 To hear a ping, use the -a (audible) option. ping -a 192 .168.4.18","title":"26. ping"},{"location":"linux/commands/#27-ps","text":"The ps command lists running processes. Using ps without any options causes it to list the processes running in the current shell. ps To see all the processes related to a particular user, use the -u (user) option. This is likely to be a long list, so for convenience pipe it through less. ps -u dave | less To see every process that is running, use the -e (every process) option: ps -e | less","title":"27. ps"},{"location":"linux/commands/#28-pwd","text":"Nice and simple, the pwd command prints the working directory (the current directory) from the root / directory. pwd pwd command in a terminal window","title":"28. pwd"},{"location":"linux/commands/#29-shutdown","text":"The shutdown command lets you shut down or reboot your Linux system. Using shutdown with no parameters will shut down your computer in one minute. shutdown To shut down immediately, use the now parameter. shutdown now You can also schedule a shutdown and inform any logged in users of the pending shutdown. To let the shutdown command know when you want it to shut down, you provide it with a time. This can be a set number of minutes from now, such as +90 or a precise time, like 23:00. Any text message you provide is broadcast to logged in users. shutdown 23 :00 Shutdown tonight at 23 :00, save your work and log out before then ! To cancel a shutdown, use the -c (cancel) option. Here we have scheduled a shutdown for fifteen minutes time from now\u2014and then changed our minds. shutdown +15 Shutting down in 15 minutes! shutdown -c Shutdown -c cancel command","title":"29. shutdown"},{"location":"linux/commands/#30-ssh","text":"Use the ssh command to make a connection to a remote Linux computer and log into your account. To make a connection, you must provide your user name and the IP address or domain name of the remote computer. In this example, the user mary is logging into the computer at 192.168.4.23. Once the connection is established, she is asked for her password. ssh mary@192.168.4.23 ssh command in a terminal window Her user name and password are verified and accepted, and she is logged in. Notice that her prompt has changed from \u201cNostromo\u201d to \u201chowtogeek.\u201d Mary issues the w command to list the current users on \u201chowtogeek\u201d system. She is listed as being connected from pts/1, which is a pseudo-terminal slave. That is, it is not a terminal directly connected to the computer. To close the session, mary types exit and is returned to the shell on the \u201cNostromo\u201d computer. w exit w and exit commands in a terminal window","title":"30. SSH"},{"location":"linux/commands/#31-sudo","text":"The sudo command is required when performing actions that require root or superuser permissions, such as changing the password for another user. sudo passwd mary passwd command in a terminal window","title":"31. sudo"},{"location":"linux/commands/#32-tail","text":"The tail command gives you a listing of the last 10 lines of a file. If you want to see fewer or more lines, use the -n (number) option. In this example, we use tail with its default of 10 lines. We then repeat the command asking for only five lines. tail core.c tail -n 5 core.c tail command in a terminal window","title":"32. tail"},{"location":"linux/commands/#33-tar","text":"With the tar command, you can create an archive file (also called a tarball) that can contain many other files. This makes it much more convenient to distribute a collection of files. You can also use tar to extract the files from an archive file. It is common to ask tar to compress the archive. If you do not ask for compression, the archive file is created uncompressed. To create an archive file, you need to tell tar which files to include in the archive file, and the name you wish the archive file to have. In this example, the user is going to archive all of the files in the Ukulele directory, which is in the current directory. ls command in the terminal window They have used the -c (create) option and the -v (verbose) option. The verbose option gives some visual feedback by listing the files to the terminal window as they are added to the archive. The -f (filename) option is followed by the desired name of the archive. In this case, it is songs.tar. tar -cvf songs.tar Ukulele/ tar -cvf command in a terminal window The files are listed to the terminal window as they are added to the archive file. There are two ways to tell tar that you want the archive file to be compressed. The first is with the -z (gzip) option. This tells tar to use the gzip utility to compress the archive once it has been created. It is usual to add .gz as suffix to this type of archive. That allows anyone who is extracting files from it to know which commands to pass to tar to correctly retrieve the files. tar -cvzf songs.tar.gz Ukulele/ The files are listed to the terminal window as they are added to the archive file as before, but the creation of the archive will take a little longer because of the time required for the compression. To create an archive file that is compressed using a superior compression algorithm giving a smaller archive file use the -j (bzip2) option. tar -cvjf songs.tar.bz2 Ukulele/ Once again, the files are listed as the archive is created. The -j option is noticeably slower than the -z option. If you are archiving a great many files, you must choose between the -z option for decent compression and reasonable speed, or the -j option for better compression and slower speed. As can be seen in the screenshot below, the \u201c.tar\u201d file is the largest, the \u201c.tar.gz\u201d is smaller, and the \u201c.tar.bz2\u201d is the smallest of the archives. To extract files from an archive file use the -x (extract) option. The -v (verbose) and -f (filename) options behave as they do when creating archives. Use ls to confirm which type of archive you are going to extract the files from, then issue the following command. ls tar -xvf songs.tar ls and tar -xvf commands in a terminal window The files are listed as they are extracted. Note that the Ukulele directory is also recreated for you. To extract files from a \u201c.tar.gz\u201d archive, use the -z (gzip) option. tar -xvzf songs.tar.gz tar -xvzf command in a terminal window Finally, to extract files from a \u201c.tar.bz2\u201d archive use the -j option instead of the -z (gzip) option. tar -xvjf songs.tar.bz2 tar -xvjf command in a terminal window RELATED: How to Extract Files From a .tar.gz or .tar.bz2 File on Linux","title":"33. tar"},{"location":"linux/commands/#34-top","text":"The top command shows you a real-time display of the data relating to your Linux machine. The top of the screen is a status summary. The first line shows you the time and how long your computer has been running for, how many users are logged into it, and what the load average has been over the past one, five, and fifteen minutes. The second line shows the number of tasks and their states: running, stopped, sleeping and zombie. The third line shows CPU information. Here\u2019s what the fields mean: us: value is the CPU time the CPU spends executing processes for users, in \u201cuser space\u201d sy: value is the CPU time spent on running system \u201ckernel space\u201d processes ni: value is the CPU time spent on executing processes with a manually set nice value id: is the amount of CPU idle time wa: value is the time the CPU spends waiting for I/O to complete hi: The CPU time spent servicing hardware interrupts si: The CPU time spent servicing software interrupts st: The CPU time lost due to running virtual machines ( \u201csteal time\u201d ) The fourth line shows the total amount of physical memory, and how much is free, used and buffered or cached. The fifth line shows the total amount of swap memory, and how much is free, used and available (taking into account memory that is expected to be recoverable from caches). top command in a terminal window The user has pressed the E key to change the display into more humanly digestible figures instead of long integers representing bytes. The columns in the main display are made up of: PID: Process ID USER: Name of the owner of the process PR: Process priority NI: The nice value of the process VIRT: Virtual memory used by the process RES: Resident memory used by the process SHR: Shared memory used by the process S: Status of the process. See the list below of the values this field can take %CPU: the share of CPU time used by the process since last update %MEM: share of physical memory used TIME+: total CPU time used by the task in hundredths of a second COMMAND: command name or command line ( name + options ) (The command column didn\u2019t fit into the screenshot.) The status of the process can be one of: D: Uninterruptible sleep R: Running S: Sleeping T: Traced ( stopped ) Z: Zombie Press the Q key to exit from top. RELATED: How to Set Process Priorities With nice and renice on Linux","title":"34. top"},{"location":"linux/commands/#35-uname","text":"You can obtain some system information regarding the Linux computer you\u2019re working on with the uname command. Use the -a (all) option to see everything. Use the -s (kernel name) option to see the type of kernel. Use the -r (kernel release) option to see the kernel release. Use the -v (kernel version) option to see the kernel version. uname -a uname -s uname -r uname -v uname command in a terminal window","title":"35. uname"},{"location":"linux/commands/#36-w","text":"The w command lists the currently logged in users. w w command in a terminal window","title":"36. w"},{"location":"linux/commands/#37-whoami","text":"Use whoami to find out who you are logged in as or who is logged into an unmanned Linux terminal.","title":"37. whoami"},{"location":"linux/java_home/","text":"If you are getting java_home is not defined correctly in Ubuntu , then you are at right place. I was getting this error as I was trying to update the Java home in ~\\.bashrc and ~\\.bash_profile . Follow these steps to solve this issue. Open the /etc/environment file as vim /etc/environment Then set java_home using JAVA_HOME = \"/usr/lib/jvm/java-8-oracle\" export JAVA_HOME Open bash profile as vim ~ \\. bash_profile Then add the following, . /etc/environment It will load the /etc/environment every time terminal is started Then confirm the path using echo $JAVA_HOME","title":"Setting Java Home"},{"location":"maven/downgrade_maven/","text":"Downgrading maven version in brew \u00b6 Check current version of maven using mvn -verison This will give you current version and the installation path as well. In my case current version is 3.5.0 as shown below Then search for available versions of maven using brew search maven This will show you all the available versions as shown below If you want to install maven 3.0 for instance, then type brew install maven@3.0 This will install the downgraded version and show some caveats as well Now the next step is to unlink older maven version and then overwrite it with version you just installed brew unlink maven brew link --overwrite maven@3.0 Now check version of maven again. if everything went well ,then you will see that version has been downgraded.","title":"Downgrading maven"},{"location":"maven/downgrade_maven/#downgrading-maven-version-in-brew","text":"Check current version of maven using mvn -verison This will give you current version and the installation path as well. In my case current version is 3.5.0 as shown below Then search for available versions of maven using brew search maven This will show you all the available versions as shown below If you want to install maven 3.0 for instance, then type brew install maven@3.0 This will install the downgraded version and show some caveats as well Now the next step is to unlink older maven version and then overwrite it with version you just installed brew unlink maven brew link --overwrite maven@3.0 Now check version of maven again. if everything went well ,then you will see that version has been downgraded.","title":"Downgrading maven version in brew"},{"location":"mysql/JdbcStatements/","text":"Difference between Prepared Statement and Statement in Java \u00b6 JDBC API provides 3 types of statements for wrapping an SQL query and sending for execution to the database. Statement : It is used to execute normal SQL queries such as select count(*) from Courses . You can also use it to execute DDL, DML and DCL SQL statements. Prepared Statement : is specialized to execute parameterized queries such as select * from Courses where courseId=? , you can execute this SQL multiple times by just changing the course id parameters. They are compiled and cached at database end, hence quite fast for repeated execution. Callable Statement : it is used to execute or call stored procedures stored in the database. Each of the Statement class has a different purpose and you should use them for what they have designed for. It's very important to understand what they are and what is their purpose, along with how to use it correctly. In this article, we will focus on understanding the difference between Statement and Prepared Statement by asking the below questions. 1. Which one to use and when? \u00b6 Prepared Statement's sole purpose is to execute bind queries. If you need to execute a query multiple times with just different data then use Prepared Statement and use a placeholder, the question mark sign (?) for the variable data. Why it is called a prepared statement? When you first execute the prepared SQL query, the database will compile it and cache it for future reuse, next time you call the same query but with a different parameter, then the database will return the result almost immediately. Because of this pre-compilation, this class is called Prepared Statement in Java. It's very useful to build search and insert queries e.g. if your application provides an interface to search some data such as course details, let's say by course, name, instructor, price, or topic. You can create Prepared Statement to handle that for better performance. On the other hand, the sole purpose of Statement object is to execute a SQL query. You give them any query and it will execute it, but unlike Prepared Statement , it will not provide pre-compilation. 2. Syntax for these statements? \u00b6 The syntax for Statement is same as SQL query, you can actually copy SQL from your favorite SQL editor and pass it as String to Statement for execution, but for Prepared Statement , you need to include placeholders i.e. questions mark (?) sign in SQL query e.g. select count ( * ) from Books ; // Statement select * from Books where book_id =? ; // Prepared Statement The actual value is set before executing the query at runtime by using the various setXXX() methods e.g. if placeholder refers to a varchar column then you can use setString(value) to set the value. Similarly, if placeholder refers to an integer column then you can use setInteger(value) method. 3. Which has better performance? \u00b6 Prepared Statement provides better performance than Statement object because of pre-compilation of SQL query on the database server. This is because when you use Prepared Statement, the query is compiled the first time but after that it is cached at the database server, making subsequent run faster. On the other hand, with the Statement object, even if you execute the same query again and again, they are always first compiled and then executed, making them slower compared to Prepared Statement queries. 4. Which one is more secure? \u00b6 The Prepared Statement also provides safety against SQL injection, but the incorrect use of Statement can cause SQL injection. If you remember, the cause of SQL injection is malicious SQL code which is injected by malicious users. For example, you could have written above query which returns a book after passing Id as below: String id = getFromUser (); String SQL = \"select * from Books where book_id=\" + id ; If you pass this SQL to Statement object then it can cause SQL injection if a user sends malicious SQL code in form of id e.g. 1 == 1 OR id, which will return every single book from the database. Though books, may not sound a sensitive data it could happen with any sensitive user data as well. Prepared Statement guards against this. That's all about the difference between Statement and Prepared Statement in Java. You can use Statement to execute SQL queries but it's not recommended, especially if you can use Prepared Statement , which is more secure and fast approach to get the data from the database. If you have to pass parameters always use PreparedStatment, never create dynamic SQL queries by concatenating String, it's not safe and prone to SQL injection attack.","title":"JDBC Statements"},{"location":"mysql/JdbcStatements/#difference-between-prepared-statement-and-statement-in-java","text":"JDBC API provides 3 types of statements for wrapping an SQL query and sending for execution to the database. Statement : It is used to execute normal SQL queries such as select count(*) from Courses . You can also use it to execute DDL, DML and DCL SQL statements. Prepared Statement : is specialized to execute parameterized queries such as select * from Courses where courseId=? , you can execute this SQL multiple times by just changing the course id parameters. They are compiled and cached at database end, hence quite fast for repeated execution. Callable Statement : it is used to execute or call stored procedures stored in the database. Each of the Statement class has a different purpose and you should use them for what they have designed for. It's very important to understand what they are and what is their purpose, along with how to use it correctly. In this article, we will focus on understanding the difference between Statement and Prepared Statement by asking the below questions.","title":"Difference between Prepared Statement and Statement in Java"},{"location":"mysql/JdbcStatements/#1-which-one-to-use-and-when","text":"Prepared Statement's sole purpose is to execute bind queries. If you need to execute a query multiple times with just different data then use Prepared Statement and use a placeholder, the question mark sign (?) for the variable data. Why it is called a prepared statement? When you first execute the prepared SQL query, the database will compile it and cache it for future reuse, next time you call the same query but with a different parameter, then the database will return the result almost immediately. Because of this pre-compilation, this class is called Prepared Statement in Java. It's very useful to build search and insert queries e.g. if your application provides an interface to search some data such as course details, let's say by course, name, instructor, price, or topic. You can create Prepared Statement to handle that for better performance. On the other hand, the sole purpose of Statement object is to execute a SQL query. You give them any query and it will execute it, but unlike Prepared Statement , it will not provide pre-compilation.","title":"1. Which one to use and when?"},{"location":"mysql/JdbcStatements/#2-syntax-for-these-statements","text":"The syntax for Statement is same as SQL query, you can actually copy SQL from your favorite SQL editor and pass it as String to Statement for execution, but for Prepared Statement , you need to include placeholders i.e. questions mark (?) sign in SQL query e.g. select count ( * ) from Books ; // Statement select * from Books where book_id =? ; // Prepared Statement The actual value is set before executing the query at runtime by using the various setXXX() methods e.g. if placeholder refers to a varchar column then you can use setString(value) to set the value. Similarly, if placeholder refers to an integer column then you can use setInteger(value) method.","title":"2. Syntax for these statements?"},{"location":"mysql/JdbcStatements/#3-which-has-better-performance","text":"Prepared Statement provides better performance than Statement object because of pre-compilation of SQL query on the database server. This is because when you use Prepared Statement, the query is compiled the first time but after that it is cached at the database server, making subsequent run faster. On the other hand, with the Statement object, even if you execute the same query again and again, they are always first compiled and then executed, making them slower compared to Prepared Statement queries.","title":"3. Which has better performance?"},{"location":"mysql/JdbcStatements/#4-which-one-is-more-secure","text":"The Prepared Statement also provides safety against SQL injection, but the incorrect use of Statement can cause SQL injection. If you remember, the cause of SQL injection is malicious SQL code which is injected by malicious users. For example, you could have written above query which returns a book after passing Id as below: String id = getFromUser (); String SQL = \"select * from Books where book_id=\" + id ; If you pass this SQL to Statement object then it can cause SQL injection if a user sends malicious SQL code in form of id e.g. 1 == 1 OR id, which will return every single book from the database. Though books, may not sound a sensitive data it could happen with any sensitive user data as well. Prepared Statement guards against this. That's all about the difference between Statement and Prepared Statement in Java. You can use Statement to execute SQL queries but it's not recommended, especially if you can use Prepared Statement , which is more secure and fast approach to get the data from the database. If you have to pass parameters always use PreparedStatment, never create dynamic SQL queries by concatenating String, it's not safe and prone to SQL injection attack.","title":"4. Which one is more secure?"},{"location":"mysql/mysql_basics/","text":"Installing MySQL \u00b6 brew install mysql Now, you have installed your MySQL database without a root password. To secure it run the following mysql_secure_installation Connecting to MySQL \u00b6 Enter the below command mysql -u root Use brew to manage MySQL using following commands brew services start mysql # This will register to run it at bot brew services run # Run the service formula without registering to launch at login brew services stop # Stop service immediately and unregister it To run as background process, by default run the following mysql.server start # start MySQL mysql.server status # check status mysql.server stop # stop the server To reset the password for MySQL you first must create a new file with the following contents ALTER USER 'root'@'localhost' IDENTIFIED BY 'PASSWORD'; Now, login using the password by using the below command mysql -u root -p Forgot MySQL password? \u00b6 perform the following steps Stop the server Start server using sudo mysqld_safe -skip-grant-tables -skip-netwroking & Connect to server using root as mysql -u root . Now, run the following commands in terminal use mysql ; \u200b update user set authentication_string = password ( 'NEWPASSWORD' ) where user = 'root' ; \u200b flush privileges ; \u200b quit Login to MySQL server again and enter the new password. change database using \u00b6 show databases ; use yourDatabaseName ; # replace yourDatabaseName with your database name show tables ; Downloading using GUI (preferred option) \u00b6 Go to https://dev.mysql.com/downloads/mysql/ and download MySQL for your OS.","title":"Abc"},{"location":"mysql/mysql_basics/#installing-mysql","text":"brew install mysql Now, you have installed your MySQL database without a root password. To secure it run the following mysql_secure_installation","title":"Installing MySQL"},{"location":"mysql/mysql_basics/#connecting-to-mysql","text":"Enter the below command mysql -u root Use brew to manage MySQL using following commands brew services start mysql # This will register to run it at bot brew services run # Run the service formula without registering to launch at login brew services stop # Stop service immediately and unregister it To run as background process, by default run the following mysql.server start # start MySQL mysql.server status # check status mysql.server stop # stop the server To reset the password for MySQL you first must create a new file with the following contents ALTER USER 'root'@'localhost' IDENTIFIED BY 'PASSWORD'; Now, login using the password by using the below command mysql -u root -p","title":"Connecting to MySQL"},{"location":"mysql/mysql_basics/#forgot-mysql-password","text":"perform the following steps Stop the server Start server using sudo mysqld_safe -skip-grant-tables -skip-netwroking & Connect to server using root as mysql -u root . Now, run the following commands in terminal use mysql ; \u200b update user set authentication_string = password ( 'NEWPASSWORD' ) where user = 'root' ; \u200b flush privileges ; \u200b quit Login to MySQL server again and enter the new password.","title":"Forgot MySQL password?"},{"location":"mysql/mysql_basics/#change-database-using","text":"show databases ; use yourDatabaseName ; # replace yourDatabaseName with your database name show tables ;","title":"change database using"},{"location":"mysql/mysql_basics/#downloading-using-gui-preferred-option","text":"Go to https://dev.mysql.com/downloads/mysql/ and download MySQL for your OS.","title":"Downloading using GUI (preferred option)"},{"location":"wget/wget/","text":"Mac provides curl , however sometime using wget is more handy. This post is for installing wget for Mac. by following the below mentined steps: Method 1 \u00b6 In most of tutorials, installing wget using curl is recommended . However I ran into several issues using this approach. I will share it with you guys. First you need to install the xcode command line tools , easiest way to do so by running in the Terminal xcode-select --install Download wget using curl curl -O http://ftp.gnu.org/gnu/wget/wget-1.15.tar.gz Unpack it using tar -zxvf wget-1.15.tar.gz cd to folder using cd wget-1.15/ 4. Then configure ./configure I have got following error that Error configure: error: --with-ssl=gnutls was given, but GNUTLS is not available. we can skip this error using ./configure --with-ssl = openssl However, this also leads to another error shown below configure: error: --with-ssl = openssl was given, but SSL is not available Method 2 \u00b6 We can easily go around aforementioned error as brew will automatically install dependencies for wget and openssl . Gor doing this you must have brew installed brew install wget as shown below, it will automatically download the dependency == > Installing dependencies for wget: openssl == > Installing wget dependency: openssl == > Downloading https://homebrew.bintray.com/bottles/openssl-1.0.2j.sierra.bottle.tar.gz ######################################################################## 100.0% == > Pouring openssl-1.0.2j.sierra.bottle.tar.gz For checking is wget is installed successfully, please cd to paricular folder and enter wget -O sample.txt http://www.gutenberg.org/cache/epub/1787/pg1787.txt text will be generated from link http://www.gutenberg.org/cache/epub/1787/pg1787.txt and saved as sample.txt Success Congrats, we have successfully installed wget on mac.If you have some issues or suggestions, please feel free to comment below.","title":"Wget on Mac"},{"location":"wget/wget/#method-1","text":"In most of tutorials, installing wget using curl is recommended . However I ran into several issues using this approach. I will share it with you guys. First you need to install the xcode command line tools , easiest way to do so by running in the Terminal xcode-select --install Download wget using curl curl -O http://ftp.gnu.org/gnu/wget/wget-1.15.tar.gz Unpack it using tar -zxvf wget-1.15.tar.gz cd to folder using cd wget-1.15/ 4. Then configure ./configure I have got following error that Error configure: error: --with-ssl=gnutls was given, but GNUTLS is not available. we can skip this error using ./configure --with-ssl = openssl However, this also leads to another error shown below configure: error: --with-ssl = openssl was given, but SSL is not available","title":"Method 1"},{"location":"wget/wget/#method-2","text":"We can easily go around aforementioned error as brew will automatically install dependencies for wget and openssl . Gor doing this you must have brew installed brew install wget as shown below, it will automatically download the dependency == > Installing dependencies for wget: openssl == > Installing wget dependency: openssl == > Downloading https://homebrew.bintray.com/bottles/openssl-1.0.2j.sierra.bottle.tar.gz ######################################################################## 100.0% == > Pouring openssl-1.0.2j.sierra.bottle.tar.gz For checking is wget is installed successfully, please cd to paricular folder and enter wget -O sample.txt http://www.gutenberg.org/cache/epub/1787/pg1787.txt text will be generated from link http://www.gutenberg.org/cache/epub/1787/pg1787.txt and saved as sample.txt Success Congrats, we have successfully installed wget on mac.If you have some issues or suggestions, please feel free to comment below.","title":"Method 2"},{"location":"wso2/wso2/","text":"Accessing the H2 Database for WSO2 Products \u00b6 Most of the WSO2 products comes with the H2 database, I have been facing some issues in order to access this database. You can follow approach A or B, in my opinion B is easier. Common step is a must Common Step \u00b6 Open the carbon.xml file to enable the access to h2 database. As I am using the WSO2 IoT server, this file is located in the IoT_HOME/conf/carbon.xml as shown above. Open this file and uncomment the following <H2DatabaseConfiguration> <property name=\u201dweb\u201d /> <property name=\u201dwebPort\u201d>8082</property> <property name=\u201dwebAllowOthers\u201d /> <property name=\u201dwebSSL\u201d /> <property name=\u201dtcp\u201d /> <property name=\u201dtcpPort\u201d>9092</property> <property name=\u201dtcpAllowOthers\u201d /> <property name=\u201dtcpSSL\u201d /> <property name=\u201dpg\u201d /> <property name=\u201dpgPort\u201d>5435</property> <property name=\u201dpgAllowOthers\u201d /> <property name=\u201dtrace\u201d /> <property name=\u201dbaseDir\u201d>${carbon.home}</property> </H2DatabaseConfiguration> Approach A: Using Web Browser \u00b6 Install the H2 database: If you are Mac user, then enter brew install h2 in terminal to install h2 database and then type h2 in terminal to start it .The h2 database will start and can be accessed from http://192.168.0.16:8082/ . If you are using the windows or Linux then install h2 from here Then copy the path for the database you want to open, In my case the database path I want to access is shown below Watch Do not copy the h2.db part of the file. For example path I copied is /Users/amar/Documents/ThesisCode/CEP_codes/wso2iot-3.3.0_new/wso2/broker/repository/database/WSO2MB_DB Now go the http://192.168.0.16:8082/ and choose the generic H2 then enter the JDBC url . Append the jdbc:h2:file: in front of path as shown in below screen-shot. Then enter username and password as wso2carbon . Press connect Approach B: Using IntelliJ IDEA \u00b6 Now the same can be done in IntelliJ Idea which also provides access to databases. For accessing databases maybe you need a ultimate version of it, which is free for students under University account. Open IntelliJ Idea and click on add new database as shown below Select H2 . You have to install the H2 drivers for first time. Info Before going further, you have to close all existing connections to the H2 , and stop H2 if its running in terminal. As shown above, first choose Embedded database type from drop down menu, then browse your file using ... option. Make sure the h2.db path does not contain h2.db . Enter username and password as wso2carbon . Thats it! Hope, it helped \ud83d\ude00","title":"Accessing the H2 Database for WSO2 Products"},{"location":"wso2/wso2/#accessing-the-h2-database-for-wso2-products","text":"Most of the WSO2 products comes with the H2 database, I have been facing some issues in order to access this database. You can follow approach A or B, in my opinion B is easier. Common step is a must","title":"Accessing the H2 Database for WSO2 Products"},{"location":"wso2/wso2/#common-step","text":"Open the carbon.xml file to enable the access to h2 database. As I am using the WSO2 IoT server, this file is located in the IoT_HOME/conf/carbon.xml as shown above. Open this file and uncomment the following <H2DatabaseConfiguration> <property name=\u201dweb\u201d /> <property name=\u201dwebPort\u201d>8082</property> <property name=\u201dwebAllowOthers\u201d /> <property name=\u201dwebSSL\u201d /> <property name=\u201dtcp\u201d /> <property name=\u201dtcpPort\u201d>9092</property> <property name=\u201dtcpAllowOthers\u201d /> <property name=\u201dtcpSSL\u201d /> <property name=\u201dpg\u201d /> <property name=\u201dpgPort\u201d>5435</property> <property name=\u201dpgAllowOthers\u201d /> <property name=\u201dtrace\u201d /> <property name=\u201dbaseDir\u201d>${carbon.home}</property> </H2DatabaseConfiguration>","title":"Common Step"},{"location":"wso2/wso2/#approach-a-using-web-browser","text":"Install the H2 database: If you are Mac user, then enter brew install h2 in terminal to install h2 database and then type h2 in terminal to start it .The h2 database will start and can be accessed from http://192.168.0.16:8082/ . If you are using the windows or Linux then install h2 from here Then copy the path for the database you want to open, In my case the database path I want to access is shown below Watch Do not copy the h2.db part of the file. For example path I copied is /Users/amar/Documents/ThesisCode/CEP_codes/wso2iot-3.3.0_new/wso2/broker/repository/database/WSO2MB_DB Now go the http://192.168.0.16:8082/ and choose the generic H2 then enter the JDBC url . Append the jdbc:h2:file: in front of path as shown in below screen-shot. Then enter username and password as wso2carbon . Press connect","title":"Approach A: Using Web Browser"},{"location":"wso2/wso2/#approach-b-using-intellij-idea","text":"Now the same can be done in IntelliJ Idea which also provides access to databases. For accessing databases maybe you need a ultimate version of it, which is free for students under University account. Open IntelliJ Idea and click on add new database as shown below Select H2 . You have to install the H2 drivers for first time. Info Before going further, you have to close all existing connections to the H2 , and stop H2 if its running in terminal. As shown above, first choose Embedded database type from drop down menu, then browse your file using ... option. Make sure the h2.db path does not contain h2.db . Enter username and password as wso2carbon . Thats it! Hope, it helped \ud83d\ude00","title":"Approach B: Using IntelliJ IDEA"},{"location":"wso2/h2/","text":"Accessing the H2 Database for WSO2 Products \u00b6 Most of the WSO2 products comes with the H2 database, I have been facing some issues in order to access this database. You can follow approach A or B, in my opinion B is easier. Common step is a must Common Step \u00b6 Open the carbon.xml file to enable the access to h2 database. As I am using the WSO2 IoT server, this file is located in the IoT_HOME/conf/carbon.xml as shown above. Open this file and uncomment the following <H2DatabaseConfiguration> <property name= \u201dweb\u201d /> <property name= \u201dwebPort\u201d > 8082 </property> <property name= \u201dwebAllowOthers\u201d /> <property name= \u201dwebSSL\u201d /> <property name= \u201dtcp\u201d /> <property name= \u201dtcpPort\u201d > 9092 </property> <property name= \u201dtcpAllowOthers\u201d /> <property name= \u201dtcpSSL\u201d /> <property name= \u201dpg\u201d /> <property name= \u201dpgPort\u201d > 5435 </property> <property name= \u201dpgAllowOthers\u201d /> <property name= \u201dtrace\u201d /> <property name= \u201dbaseDir\u201d > ${carbon.home} </property> </H2DatabaseConfiguration> Approach A: Using Web Browser \u00b6 Install the H2 database: If you are Mac user, then enter brew install h2 in terminal to install h2 database and then type h2 in terminal to start it .The h2 database will start and can be accessed from http://192.168.0.16:8082/ . If you are using the windows or Linux then install h2 from here Then copy the path for the database you want to open, In my case the database path I want to access is shown below Watch Do not copy the h2.db part of the file. For example path I copied is /Users/amar/Documents/ThesisCode/CEP_codes/wso2iot-3.3.0_new/wso2/broker/repository/database/WSO2MB_DB Now go the http://192.168.0.16:8082/ and choose the generic H2 then enter the JDBC url . Append the jdbc:h2:file: in front of path as shown in below screen-shot. Then enter username and password as wso2carbon . Press connect Approach B: Using IntelliJ IDEA \u00b6 Now the same can be done in IntelliJ Idea which also provides access to databases. For accessing databases maybe you need a ultimate version of it, which is free for students under University account. Open IntelliJ Idea and click on add new database as shown below Select H2 . You have to install the H2 drivers for first time. Info Before going further, you have to close all existing connections to the H2 , and stop H2 if its running in terminal. As shown above, first choose Embedded database type from drop down menu, then browse your file using ... option. Make sure the h2.db path does not contain h2.db . Enter username and password as wso2carbon . Thats it! Hope, it helped \ud83d\ude00","title":"H2 Database for WSO2 Products"},{"location":"wso2/h2/#accessing-the-h2-database-for-wso2-products","text":"Most of the WSO2 products comes with the H2 database, I have been facing some issues in order to access this database. You can follow approach A or B, in my opinion B is easier. Common step is a must","title":"Accessing the H2 Database for WSO2 Products"},{"location":"wso2/h2/#common-step","text":"Open the carbon.xml file to enable the access to h2 database. As I am using the WSO2 IoT server, this file is located in the IoT_HOME/conf/carbon.xml as shown above. Open this file and uncomment the following <H2DatabaseConfiguration> <property name= \u201dweb\u201d /> <property name= \u201dwebPort\u201d > 8082 </property> <property name= \u201dwebAllowOthers\u201d /> <property name= \u201dwebSSL\u201d /> <property name= \u201dtcp\u201d /> <property name= \u201dtcpPort\u201d > 9092 </property> <property name= \u201dtcpAllowOthers\u201d /> <property name= \u201dtcpSSL\u201d /> <property name= \u201dpg\u201d /> <property name= \u201dpgPort\u201d > 5435 </property> <property name= \u201dpgAllowOthers\u201d /> <property name= \u201dtrace\u201d /> <property name= \u201dbaseDir\u201d > ${carbon.home} </property> </H2DatabaseConfiguration>","title":"Common Step"},{"location":"wso2/h2/#approach-a-using-web-browser","text":"Install the H2 database: If you are Mac user, then enter brew install h2 in terminal to install h2 database and then type h2 in terminal to start it .The h2 database will start and can be accessed from http://192.168.0.16:8082/ . If you are using the windows or Linux then install h2 from here Then copy the path for the database you want to open, In my case the database path I want to access is shown below Watch Do not copy the h2.db part of the file. For example path I copied is /Users/amar/Documents/ThesisCode/CEP_codes/wso2iot-3.3.0_new/wso2/broker/repository/database/WSO2MB_DB Now go the http://192.168.0.16:8082/ and choose the generic H2 then enter the JDBC url . Append the jdbc:h2:file: in front of path as shown in below screen-shot. Then enter username and password as wso2carbon . Press connect","title":"Approach A: Using Web Browser"},{"location":"wso2/h2/#approach-b-using-intellij-idea","text":"Now the same can be done in IntelliJ Idea which also provides access to databases. For accessing databases maybe you need a ultimate version of it, which is free for students under University account. Open IntelliJ Idea and click on add new database as shown below Select H2 . You have to install the H2 drivers for first time. Info Before going further, you have to close all existing connections to the H2 , and stop H2 if its running in terminal. As shown above, first choose Embedded database type from drop down menu, then browse your file using ... option. Make sure the h2.db path does not contain h2.db . Enter username and password as wso2carbon . Thats it! Hope, it helped \ud83d\ude00","title":"Approach B: Using IntelliJ IDEA"},{"location":"wso2/jms/","text":"Setting up JMS Queue in WSO2 IoT Server \u00b6 I was struggling for few days to get JMS queue up-and-running in WSO2 IoT Server . In my experience, setting the queue is easy in programming, but when it comes to complicated systems, sometime small mistakes can consume lot of time. So, without any further ado, lets get going. Please make sure the WSO2 IoT server is in off state. I will let you know when to turn it on. Knowing the configuration file paths \u00b6 The WSO2 IoT server consists of 3 tiers: Broker , Core and Analytics as shown below Now, for using the JMS there are 3 options in WSO2 IoT server, which are Using Apache ActiveMQ Using Apache Qpid Using WSO2 Message Broker (MB) Out of these, the first option worked for me. The important thing to understand is that, we need to enable the ActiveMQ configurations for all three tiers i.e. Broker, Core and Analytics. The most confusing part is the file structure for configurations, as WSO2 has so many products that even most of paths mentioned in documentation got me confused. So, I would advice you to write the paths down or mark the folders using color coding. Path for IoT Core is shown below Mark both .xml files which are selected in fugure. Next, the path for IoT Analytics as shown below The path of IoT broker is in wso2/broker/conf/axis2 similar to IoT analytics. Setting up the configuration for JMS \u00b6 Once you know all the paths, lets make the required changes in axis2.xml file as shown below Enable Transport Receiver \u00b6 Please note that JMS queue has 2 components: receiver and sender. First we will add the receiver part. If you open the axis.xml file and search for jms you will find the three blocks of code related to receiver part. Please uncomment the code related to ApacheMQ as shown below. <transportReceiver name= \"jms\" class= \"org.apache.axis2.transport.jms.JMSListener\" > <parameter name= \"myTopicConnectionFactory\" > <parameter name= \"java.naming.factory.initial\" > org.apache.activemq.jndi.ActiveMQInitialContextFactory </parameter> <parameter name= \"java.naming.provider.url\" locked= \"false\" > failover:tcp://localhost:61616 </parameter> <parameter name= \"transport.jms.ConnectionFactoryJNDIName\" locked= \"false\" > TopicConnectionFactory </parameter> <parameter name= \"transport.jms.ConnectionFactoryType\" locked= \"false\" > topic </parameter> <property name= \"userName\" value= \"admin\" /> <property name= \"password\" value= \"admin\" /> </parameter> <parameter name= \"myQueueConnectionFactory\" > <parameter name= \"java.naming.factory.initial\" > org.apache.activemq.jndi.ActiveMQInitialContextFactory </parameter> <parameter name= \"java.naming.provider.url\" locked= \"false\" > failover:tcp://localhost:61616 </parameter> <parameter name= \"transport.jms.ConnectionFactoryJNDIName\" locked= \"false\" > QueueConnectionFactory </parameter> <parameter name= \"transport.jms.ConnectionFactoryType\" locked= \"false\" > topic </parameter> <property name= \"userName\" value= \"admin\" /> <property name= \"password\" value= \"admin\" /> </parameter> <parameter name= \"default\" > <parameter name= \"java.naming.factory.initial\" > org.apache.activemq.jndi.ActiveMQInitialContextFactory </parameter> <parameter name= \"java.naming.provider.url\" locked= \"false\" > failover:tcp://localhost:61616 </parameter> <parameter name= \"transport.jms.ConnectionFactoryJNDIName\" locked= \"false\" > TopicConnectionFactory </parameter> <parameter name= \"transport.jms.ConnectionFactoryType\" locked= \"false\" > topic </parameter> <property name= \"userName\" value= \"admin\" /> <property name= \"password\" value= \"admin\" /> </parameter> </transportReceiver> As you have noticed, I have made some additional changes in given code, one of which is to add failover in front of tcp://localhost:61616 and other is to add both username and password . The failover helps to reestablish the connection when connection breaks which often happen in real world scenarios. Enable Transport Sender \u00b6 <transportSender name= \"jms\" class= \"org.apache.axis2.transport.jms.JMSSender\" /> Un-comment the above code which is also available in file. Please make sure that there is no error when you un-comment the code. If you think there is some issue, please go ahead and copy paste the below code. Making Changes in axis2_client.xml file \u00b6 Just enable the JMS sender by un-commenting the given sender code as shown below. There are no settings for JMS receiver in this file. <transportSender name= \"jms\" class= \"org.apache.axis2.transport.jms.JMSSender\" /> Enable Receiver and Sender for Broker, Core and Analytics \u00b6 Yes, you have to enable aforementioned settings for both axis2.xml and axis2_client.xml for all three tiers except the exeption mentioned below. Take some time to make sure that there is no mistake while un-commenting the code. Exception Please dot not enable Transport Sender in IoT_HOME/conf/axis2.xml and IoT_HOME/conf/axis2_client.xml. However, enable Transport sender for all the tiers. A summarized view is given in below table. Download the required dependencies. \u00b6 Caveat The ActiveMQ libraries need to be available in various classpath folder of IoT server. You need to copy the jars from the lib folder of the ActiveMQ as shown below. In case you use the dependency manager such as brew or apt-get to install ActiveMQ, then please find the right version of the ActiveMQ and download the binary version to get jars or go to installation folder. As I used ActiveMQ version 5.5.1 , thus these are the required jars. Download these jar files form maven central activemq-core-5.5.1.jar axis2-transport-all-1.0.0.jar geronimo-j2ee-management_1.0_spec-1.0.1.jar geronimo-jms_1.1_spec-1.1.1.jar Place them in following 3 locations. wso2_home/lib wso2_home/wso2/lib wso2_home/wso2/components/lib Here, the wso2_home is the main installation directory for IoT server. Congrats, we are halfway thorough. Now is time to do some installation Install and start ActiveMQ \u00b6 If you are mac user, then type brew install activemq to download ActiveMQ. Further, start the ActiveMQ using activemq start . Now, check status using activemq status . Please use your favorite package manager such as apt-get or choco to download the ActiveMQ, if you are using Linux or Windows respectively. Caveat If you run activemq start multiple times, it will kick off multiple JVMs to run the broker. However since you did not specify any unique broker configuration, each instance will use the same default broker configuration from conf/activemq.xml . And that typically means each broker instance will compete for the lock on the default KahaDB store. Only one instance will get the lock on that store and fully start up (the master broker), the other instances will continue to compete for the lock (slave brokers). Start the IoT Server i.e. broker, core and analytics. \u00b6 While the products are starting, run a find search in terminal for jms keyword. This way you will know if there is some issue related to JMS. Message broker should say that jms sender started as shown below Make pipeline \u00b6 First make the basic pipeline so that you have the streaming data arriving at IoT server to a particular stream say stream A . Now we will add the stream A to JMS queue publisher. Then we need the JMS receiver to get the data from JMS publisher and further sends it to a logger. Lets understand it by below figure. As shows in the above figure the JMS publisher receives the stream A and en-queues the tuples/events in queue1 . Further the JMS Subscriber subscribes to queue1 and send it to Stream C . Further Stream C is published to Logger publisher which shows the logs in Analytics terminal console . Setting for JMS publisher is given below <?xml version=\"1.0\" encoding=\"UTF-8\"?> <eventPublisher name= \"jms_pub\" processing= \"enable\" statistics= \"enable\" trace= \"enable\" xmlns= \"http://wso2.org/carbon/eventpublisher\" > <from streamName= \"stream1_scep_timestamped\" version= \"1.0.0\" /> <mapping customMapping= \"disable\" type= \"json\" /> <to eventAdapterType= \"jms\" > <property name= \"transport.jms.DestinationType\" > queue </property> <property name= \"transport.jms.Destination\" > queue1 </property> <property name= \"transport.jms.ConcurrentPublishers\" > allow </property> <property name= \"java.naming.factory.initial\" > org.apache.activemq.jndi.ActiveMQInitialContextFactory </property> <property name= \"java.naming.provider.url\" > tcp://localhost:61616 </property> <property name= \"transport.jms.ConnectionFactoryJNDIName\" > QueueConnectionFactory </property> <property name= \"transport.jms.UserName\" > admin </property> <property encrypted= \"true\" name= \"transport.jms.Password\" > aa47+5/q7d9AvOHUyYAJDXrx0Q6GQmgzIKS/hOkzp6huHrxslJJk6Oqmv2mrW159DOTfJ7Rw2nBbfGWjGiMckTFAO9p9YVF3kDDHhiyirWEJPSESSSJeBB782qnwoXEDSAjgiiUYWSRuYIfxdibXUUZr3JPSmjaxvy+EVMjjWgouMrid51UQTW50wl3C0fX03/nak4P9+GWx14T1JGAb07fKQlgK/AwYtJ8esNyiV1j0Z2jgGM9OLpqgZ9gqjsA95htzdqy2DgC/U74qfhkUKISAXUWZdGS+rCEYBFaVzAj0aPKtXmRWTrC6OTDSTVLQCKZPfcHqnU652PUQZqqKCA== </property> </to> </eventPublisher> The username and password are admin and admin . Only the setting you need form here are the configuration setting like url etc. Make sure to use a unique queue name like I used queue1 . Take a note of it as we need to subscribe to it in JMS receiver. Also, one more important thing, there are 2 options in JMS i.e. queue or topic . Make sure you use the same in JMS publisher and JMS Receiver. Also as I am using the queue, hence I used QueueConnectionFactory . The code for JMS receiver is also similar as shown below <?xml version=\"1.0\" encoding=\"UTF-8\"?> <eventReceiver name= \"jms_sub\" statistics= \"disable\" trace= \"disable\" xmlns= \"http://wso2.org/carbon/eventreceiver\" > <from eventAdapterType= \"jms\" > <property name= \"transport.jms.DestinationType\" > queue </property> <property name= \"transport.jms.Destination\" > queue1 </property> <property name= \"java.naming.factory.initial\" > org.apache.activemq.jndi.ActiveMQInitialContextFactory </property> <property name= \"java.naming.provider.url\" > tcp://localhost:61616 </property> <property name= \"transport.jms.SubscriptionDurable\" > false </property> <property name= \"transport.jms.ConnectionFactoryJNDIName\" > QueueConnectionFactory </property> <property name= \"transport.jms.UserName\" > admin </property> <property encrypted= \"true\" name= \"transport.jms.Password\" > aa47+5/q7d9AvOHUyYAJDXrx0Q6GQmgzIKS/hOkzp6huHrxslJJk6Oqmv2mrW159DOTfJ7Rw2nBbfGWjGiMckTFAO9p9YVF3kDDHhiyirWEJPSESSSJeBB782qnwoXEDSAjgiiUYWSRuYIfxdibXUUZr3JPSmjaxvy+EVMjjWgouMrid51UQTW50wl3C0fX03/nak4P9+GWx14T1JGAb07fKQlgK/AwYtJ8esNyiV1j0Z2jgGM9OLpqgZ9gqjsA95htzdqy2DgC/U74qfhkUKISAXUWZdGS+rCEYBFaVzAj0aPKtXmRWTrC6OTDSTVLQCKZPfcHqnU652PUQZqqKCA== </property> </from> <mapping customMapping= \"disable\" type= \"json\" /> <to streamName= \"stream1_scep_timestamped\" version= \"2.0.0\" /> </eventReceiver> Now add the logger and send some events to stream A . If all went right, you should see the output at analytics tier console.","title":"JMS Queue in WSO2 IoT Server"},{"location":"wso2/jms/#setting-up-jms-queue-in-wso2-iot-server","text":"I was struggling for few days to get JMS queue up-and-running in WSO2 IoT Server . In my experience, setting the queue is easy in programming, but when it comes to complicated systems, sometime small mistakes can consume lot of time. So, without any further ado, lets get going. Please make sure the WSO2 IoT server is in off state. I will let you know when to turn it on.","title":"Setting up JMS Queue in WSO2 IoT Server"},{"location":"wso2/jms/#knowing-the-configuration-file-paths","text":"The WSO2 IoT server consists of 3 tiers: Broker , Core and Analytics as shown below Now, for using the JMS there are 3 options in WSO2 IoT server, which are Using Apache ActiveMQ Using Apache Qpid Using WSO2 Message Broker (MB) Out of these, the first option worked for me. The important thing to understand is that, we need to enable the ActiveMQ configurations for all three tiers i.e. Broker, Core and Analytics. The most confusing part is the file structure for configurations, as WSO2 has so many products that even most of paths mentioned in documentation got me confused. So, I would advice you to write the paths down or mark the folders using color coding. Path for IoT Core is shown below Mark both .xml files which are selected in fugure. Next, the path for IoT Analytics as shown below The path of IoT broker is in wso2/broker/conf/axis2 similar to IoT analytics.","title":"Knowing the configuration file paths"},{"location":"wso2/jms/#setting-up-the-configuration-for-jms","text":"Once you know all the paths, lets make the required changes in axis2.xml file as shown below","title":"Setting up the configuration for JMS"},{"location":"wso2/jms/#enable-transport-receiver","text":"Please note that JMS queue has 2 components: receiver and sender. First we will add the receiver part. If you open the axis.xml file and search for jms you will find the three blocks of code related to receiver part. Please uncomment the code related to ApacheMQ as shown below. <transportReceiver name= \"jms\" class= \"org.apache.axis2.transport.jms.JMSListener\" > <parameter name= \"myTopicConnectionFactory\" > <parameter name= \"java.naming.factory.initial\" > org.apache.activemq.jndi.ActiveMQInitialContextFactory </parameter> <parameter name= \"java.naming.provider.url\" locked= \"false\" > failover:tcp://localhost:61616 </parameter> <parameter name= \"transport.jms.ConnectionFactoryJNDIName\" locked= \"false\" > TopicConnectionFactory </parameter> <parameter name= \"transport.jms.ConnectionFactoryType\" locked= \"false\" > topic </parameter> <property name= \"userName\" value= \"admin\" /> <property name= \"password\" value= \"admin\" /> </parameter> <parameter name= \"myQueueConnectionFactory\" > <parameter name= \"java.naming.factory.initial\" > org.apache.activemq.jndi.ActiveMQInitialContextFactory </parameter> <parameter name= \"java.naming.provider.url\" locked= \"false\" > failover:tcp://localhost:61616 </parameter> <parameter name= \"transport.jms.ConnectionFactoryJNDIName\" locked= \"false\" > QueueConnectionFactory </parameter> <parameter name= \"transport.jms.ConnectionFactoryType\" locked= \"false\" > topic </parameter> <property name= \"userName\" value= \"admin\" /> <property name= \"password\" value= \"admin\" /> </parameter> <parameter name= \"default\" > <parameter name= \"java.naming.factory.initial\" > org.apache.activemq.jndi.ActiveMQInitialContextFactory </parameter> <parameter name= \"java.naming.provider.url\" locked= \"false\" > failover:tcp://localhost:61616 </parameter> <parameter name= \"transport.jms.ConnectionFactoryJNDIName\" locked= \"false\" > TopicConnectionFactory </parameter> <parameter name= \"transport.jms.ConnectionFactoryType\" locked= \"false\" > topic </parameter> <property name= \"userName\" value= \"admin\" /> <property name= \"password\" value= \"admin\" /> </parameter> </transportReceiver> As you have noticed, I have made some additional changes in given code, one of which is to add failover in front of tcp://localhost:61616 and other is to add both username and password . The failover helps to reestablish the connection when connection breaks which often happen in real world scenarios.","title":"Enable Transport Receiver"},{"location":"wso2/jms/#enable-transport-sender","text":"<transportSender name= \"jms\" class= \"org.apache.axis2.transport.jms.JMSSender\" /> Un-comment the above code which is also available in file. Please make sure that there is no error when you un-comment the code. If you think there is some issue, please go ahead and copy paste the below code.","title":"Enable Transport Sender"},{"location":"wso2/jms/#making-changes-in-axis2_clientxml-file","text":"Just enable the JMS sender by un-commenting the given sender code as shown below. There are no settings for JMS receiver in this file. <transportSender name= \"jms\" class= \"org.apache.axis2.transport.jms.JMSSender\" />","title":"Making Changes in axis2_client.xml file"},{"location":"wso2/jms/#enable-receiver-and-sender-for-broker-core-and-analytics","text":"Yes, you have to enable aforementioned settings for both axis2.xml and axis2_client.xml for all three tiers except the exeption mentioned below. Take some time to make sure that there is no mistake while un-commenting the code. Exception Please dot not enable Transport Sender in IoT_HOME/conf/axis2.xml and IoT_HOME/conf/axis2_client.xml. However, enable Transport sender for all the tiers. A summarized view is given in below table.","title":"Enable Receiver and Sender for Broker, Core and Analytics"},{"location":"wso2/jms/#download-the-required-dependencies","text":"Caveat The ActiveMQ libraries need to be available in various classpath folder of IoT server. You need to copy the jars from the lib folder of the ActiveMQ as shown below. In case you use the dependency manager such as brew or apt-get to install ActiveMQ, then please find the right version of the ActiveMQ and download the binary version to get jars or go to installation folder. As I used ActiveMQ version 5.5.1 , thus these are the required jars. Download these jar files form maven central activemq-core-5.5.1.jar axis2-transport-all-1.0.0.jar geronimo-j2ee-management_1.0_spec-1.0.1.jar geronimo-jms_1.1_spec-1.1.1.jar Place them in following 3 locations. wso2_home/lib wso2_home/wso2/lib wso2_home/wso2/components/lib Here, the wso2_home is the main installation directory for IoT server. Congrats, we are halfway thorough. Now is time to do some installation","title":"Download the required dependencies."},{"location":"wso2/jms/#install-and-start-activemq","text":"If you are mac user, then type brew install activemq to download ActiveMQ. Further, start the ActiveMQ using activemq start . Now, check status using activemq status . Please use your favorite package manager such as apt-get or choco to download the ActiveMQ, if you are using Linux or Windows respectively. Caveat If you run activemq start multiple times, it will kick off multiple JVMs to run the broker. However since you did not specify any unique broker configuration, each instance will use the same default broker configuration from conf/activemq.xml . And that typically means each broker instance will compete for the lock on the default KahaDB store. Only one instance will get the lock on that store and fully start up (the master broker), the other instances will continue to compete for the lock (slave brokers).","title":"Install and start ActiveMQ"},{"location":"wso2/jms/#start-the-iot-server-ie-broker-core-and-analytics","text":"While the products are starting, run a find search in terminal for jms keyword. This way you will know if there is some issue related to JMS. Message broker should say that jms sender started as shown below","title":"Start the IoT Server i.e. broker, core and analytics."},{"location":"wso2/jms/#make-pipeline","text":"First make the basic pipeline so that you have the streaming data arriving at IoT server to a particular stream say stream A . Now we will add the stream A to JMS queue publisher. Then we need the JMS receiver to get the data from JMS publisher and further sends it to a logger. Lets understand it by below figure. As shows in the above figure the JMS publisher receives the stream A and en-queues the tuples/events in queue1 . Further the JMS Subscriber subscribes to queue1 and send it to Stream C . Further Stream C is published to Logger publisher which shows the logs in Analytics terminal console . Setting for JMS publisher is given below <?xml version=\"1.0\" encoding=\"UTF-8\"?> <eventPublisher name= \"jms_pub\" processing= \"enable\" statistics= \"enable\" trace= \"enable\" xmlns= \"http://wso2.org/carbon/eventpublisher\" > <from streamName= \"stream1_scep_timestamped\" version= \"1.0.0\" /> <mapping customMapping= \"disable\" type= \"json\" /> <to eventAdapterType= \"jms\" > <property name= \"transport.jms.DestinationType\" > queue </property> <property name= \"transport.jms.Destination\" > queue1 </property> <property name= \"transport.jms.ConcurrentPublishers\" > allow </property> <property name= \"java.naming.factory.initial\" > org.apache.activemq.jndi.ActiveMQInitialContextFactory </property> <property name= \"java.naming.provider.url\" > tcp://localhost:61616 </property> <property name= \"transport.jms.ConnectionFactoryJNDIName\" > QueueConnectionFactory </property> <property name= \"transport.jms.UserName\" > admin </property> <property encrypted= \"true\" name= \"transport.jms.Password\" > aa47+5/q7d9AvOHUyYAJDXrx0Q6GQmgzIKS/hOkzp6huHrxslJJk6Oqmv2mrW159DOTfJ7Rw2nBbfGWjGiMckTFAO9p9YVF3kDDHhiyirWEJPSESSSJeBB782qnwoXEDSAjgiiUYWSRuYIfxdibXUUZr3JPSmjaxvy+EVMjjWgouMrid51UQTW50wl3C0fX03/nak4P9+GWx14T1JGAb07fKQlgK/AwYtJ8esNyiV1j0Z2jgGM9OLpqgZ9gqjsA95htzdqy2DgC/U74qfhkUKISAXUWZdGS+rCEYBFaVzAj0aPKtXmRWTrC6OTDSTVLQCKZPfcHqnU652PUQZqqKCA== </property> </to> </eventPublisher> The username and password are admin and admin . Only the setting you need form here are the configuration setting like url etc. Make sure to use a unique queue name like I used queue1 . Take a note of it as we need to subscribe to it in JMS receiver. Also, one more important thing, there are 2 options in JMS i.e. queue or topic . Make sure you use the same in JMS publisher and JMS Receiver. Also as I am using the queue, hence I used QueueConnectionFactory . The code for JMS receiver is also similar as shown below <?xml version=\"1.0\" encoding=\"UTF-8\"?> <eventReceiver name= \"jms_sub\" statistics= \"disable\" trace= \"disable\" xmlns= \"http://wso2.org/carbon/eventreceiver\" > <from eventAdapterType= \"jms\" > <property name= \"transport.jms.DestinationType\" > queue </property> <property name= \"transport.jms.Destination\" > queue1 </property> <property name= \"java.naming.factory.initial\" > org.apache.activemq.jndi.ActiveMQInitialContextFactory </property> <property name= \"java.naming.provider.url\" > tcp://localhost:61616 </property> <property name= \"transport.jms.SubscriptionDurable\" > false </property> <property name= \"transport.jms.ConnectionFactoryJNDIName\" > QueueConnectionFactory </property> <property name= \"transport.jms.UserName\" > admin </property> <property encrypted= \"true\" name= \"transport.jms.Password\" > aa47+5/q7d9AvOHUyYAJDXrx0Q6GQmgzIKS/hOkzp6huHrxslJJk6Oqmv2mrW159DOTfJ7Rw2nBbfGWjGiMckTFAO9p9YVF3kDDHhiyirWEJPSESSSJeBB782qnwoXEDSAjgiiUYWSRuYIfxdibXUUZr3JPSmjaxvy+EVMjjWgouMrid51UQTW50wl3C0fX03/nak4P9+GWx14T1JGAb07fKQlgK/AwYtJ8esNyiV1j0Z2jgGM9OLpqgZ9gqjsA95htzdqy2DgC/U74qfhkUKISAXUWZdGS+rCEYBFaVzAj0aPKtXmRWTrC6OTDSTVLQCKZPfcHqnU652PUQZqqKCA== </property> </from> <mapping customMapping= \"disable\" type= \"json\" /> <to streamName= \"stream1_scep_timestamped\" version= \"2.0.0\" /> </eventReceiver> Now add the logger and send some events to stream A . If all went right, you should see the output at analytics tier console.","title":"Make pipeline"}]}